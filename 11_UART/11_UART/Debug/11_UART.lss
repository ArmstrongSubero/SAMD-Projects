
11_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000840  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00000840  00000840  00010840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000042c  20000000  00000848  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000040  2000042c  00000c74  0002042c  2**2
                  ALLOC
  4 .stack        00002004  2000046c  00000cb4  0002042c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008cc6  00000000  00000000  000204ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000759  00000000  00000000  00029173  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000027d  00000000  00000000  000298cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000000f0  00000000  00000000  00029b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00029c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011734  00000000  00000000  00029ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000023d9  00000000  00000000  0003b415  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006f152  00000000  00000000  0003d7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000360  00000000  00000000  000ac940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	70 24 00 20 8d 02 00 00 89 02 00 00 89 02 00 00     p$. ............
	...
  2c:	89 02 00 00 00 00 00 00 00 00 00 00 89 02 00 00     ................
  3c:	89 02 00 00 89 02 00 00 89 02 00 00 89 02 00 00     ................
  4c:	89 02 00 00 89 02 00 00 89 02 00 00 89 02 00 00     ................
  5c:	89 02 00 00 89 02 00 00 89 02 00 00 89 02 00 00     ................
  6c:	89 02 00 00 89 02 00 00 89 02 00 00 89 02 00 00     ................
  7c:	89 02 00 00 89 02 00 00 89 02 00 00 89 02 00 00     ................
  8c:	89 02 00 00 89 02 00 00 00 00 00 00 00 00 00 00     ................
  9c:	89 02 00 00 89 02 00 00 89 02 00 00 89 02 00 00     ................
  ac:	89 02 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	2000042c 	.word	0x2000042c
  d4:	00000000 	.word	0x00000000
  d8:	00000848 	.word	0x00000848

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000430 	.word	0x20000430
 108:	00000848 	.word	0x00000848
 10c:	00000848 	.word	0x00000848
 110:	00000000 	.word	0x00000000

00000114 <AppInit>:
 * Note:            This was taken from the _00_LED_ON provided by
 *                  Microchip Technology Inc. 
 *
 ******************************************************************************/
void AppInit(void)
{
 114:	b510      	push	{r4, lr}
	/*	Clock initialization (CPU, AHB, APBx, Asynchronous Peripheral Clocks)
		The System RC Oscillator (RCSYS) provides the source for the main clock
		at chip startup. It is set to 1MHz.
	*/
	ClocksInit();
 116:	4b04      	ldr	r3, [pc, #16]	; (128 <AppInit+0x14>)
 118:	4798      	blx	r3
	
	// Assign LED0 as OUTPUT
	REG_PORT_DIR0 = LED0_PIN_MASK;
 11a:	2380      	movs	r3, #128	; 0x80
 11c:	029b      	lsls	r3, r3, #10
 11e:	4a03      	ldr	r2, [pc, #12]	; (12c <AppInit+0x18>)
 120:	6013      	str	r3, [r2, #0]
	
	// Set LED0 OFF
	REG_PORT_OUTCLR0 = LED0_PIN_MASK;
 122:	4a03      	ldr	r2, [pc, #12]	; (130 <AppInit+0x1c>)
 124:	6013      	str	r3, [r2, #0]
	

} // AppInit()
 126:	bd10      	pop	{r4, pc}
 128:	00000171 	.word	0x00000171
 12c:	41004400 	.word	0x41004400
 130:	41004414 	.word	0x41004414

00000134 <AppRun>:
 *
 * Note:
 *
 ******************************************************************************/
void AppRun(void)
{
 134:	b570      	push	{r4, r5, r6, lr}
	// Initialize the UART at 9600 baud
	UART3_Init(9600);
 136:	2096      	movs	r0, #150	; 0x96
 138:	0180      	lsls	r0, r0, #6
 13a:	4b07      	ldr	r3, [pc, #28]	; (158 <AppRun+0x24>)
 13c:	4798      	blx	r3
	delay_ms(500);
 13e:	4807      	ldr	r0, [pc, #28]	; (15c <AppRun+0x28>)
 140:	4b07      	ldr	r3, [pc, #28]	; (160 <AppRun+0x2c>)
 142:	4798      	blx	r3
	
	while(1)
	{
		 // Check to see if we have data
		 if (UART3_Has_Data()) 
 144:	4c07      	ldr	r4, [pc, #28]	; (164 <AppRun+0x30>)
		 {
			 // Read Data from UART3
			 char c = UART3_Read();
 146:	4e08      	ldr	r6, [pc, #32]	; (168 <AppRun+0x34>)
			 
			 // Write Back the Data We Read
			 UART3_Write(c);
 148:	4d08      	ldr	r5, [pc, #32]	; (16c <AppRun+0x38>)
		 if (UART3_Has_Data()) 
 14a:	47a0      	blx	r4
 14c:	2800      	cmp	r0, #0
 14e:	d0fc      	beq.n	14a <AppRun+0x16>
			 char c = UART3_Read();
 150:	47b0      	blx	r6
			 UART3_Write(c);
 152:	47a8      	blx	r5
 154:	e7f9      	b.n	14a <AppRun+0x16>
 156:	46c0      	nop			; (mov r8, r8)
 158:	00000385 	.word	0x00000385
 15c:	003450dc 	.word	0x003450dc
 160:	0000027d 	.word	0x0000027d
 164:	00000445 	.word	0x00000445
 168:	00000455 	.word	0x00000455
 16c:	0000042d 	.word	0x0000042d

00000170 <ClocksInit>:

	/* ----------------------------------------------------------------------------------------------
	* 1) Set Flash wait states for 48 MHz (per Table 37-40 in data sheet)
	*/
	
	NVMCTRL->CTRLB.bit.RWS = 1;		/* 1 wait state required @ 3.3V & 48MHz */
 170:	4a34      	ldr	r2, [pc, #208]	; (244 <ClocksInit+0xd4>)
 172:	6853      	ldr	r3, [r2, #4]
 174:	211e      	movs	r1, #30
 176:	438b      	bics	r3, r1
 178:	391c      	subs	r1, #28
 17a:	430b      	orrs	r3, r1
 17c:	6053      	str	r3, [r2, #4]
		.bit.AAMPEN = 0,		/* Disable automatic amplitude control */
		.bit.EN32K = 1,			/* 32kHz output is disabled */
		.bit.XTALEN = 1			/* Crystal connected to XIN32/XOUT32 */
	};
	// Write these settings
	SYSCTRL->XOSC32K.reg = sysctrl_xosc32k.reg;
 17e:	4b32      	ldr	r3, [pc, #200]	; (248 <ClocksInit+0xd8>)
 180:	2283      	movs	r2, #131	; 0x83
 182:	0092      	lsls	r2, r2, #2
 184:	829a      	strh	r2, [r3, #20]
	// Enable the Oscillator - Separate step per data sheet recommendation (sec 17.6.3)
	SYSCTRL->XOSC32K.bit.ENABLE = 1;
 186:	8a9a      	ldrh	r2, [r3, #20]
 188:	430a      	orrs	r2, r1
 18a:	829a      	strh	r2, [r3, #20]
	
	// Wait for XOSC32K to stabilize
	while(!SYSCTRL->PCLKSR.bit.XOSC32KRDY);
 18c:	001a      	movs	r2, r3
 18e:	68d3      	ldr	r3, [r2, #12]
 190:	079b      	lsls	r3, r3, #30
 192:	d5fc      	bpl.n	18e <ClocksInit+0x1e>
	{
		.bit.DIV = 1,								/* Set output division factor = 1 */
		.bit.ID = GENERIC_CLOCK_GENERATOR_XOSC32K	/* Apply division factor to Generator 1 */
	};
	// Write these settings
	GCLK->GENDIV.reg = gclk1_gendiv.reg;
 194:	4b2d      	ldr	r3, [pc, #180]	; (24c <ClocksInit+0xdc>)
 196:	2202      	movs	r2, #2
 198:	32ff      	adds	r2, #255	; 0xff
 19a:	609a      	str	r2, [r3, #8]
	
	// Configure Generic Clock Generator 1 with XOSC32K as source
	GCLK_GENCTRL_Type gclk1_genctrl = 
 19c:	4a2c      	ldr	r2, [pc, #176]	; (250 <ClocksInit+0xe0>)
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x05,		/* Generator source: XOSC32K output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_XOSC32K			/* Generator ID: 1 */
	};
	// Write these settings
	GCLK->GENCTRL.reg = gclk1_genctrl.reg;
 19e:	605a      	str	r2, [r3, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
 1a0:	001a      	movs	r2, r3
 1a2:	7853      	ldrb	r3, [r2, #1]
 1a4:	09db      	lsrs	r3, r3, #7
 1a6:	d1fc      	bne.n	1a2 <ClocksInit+0x32>
		.bit.CLKEN = 1,			/* Enable the Generic Clock */
		.bit.GEN = GENERIC_CLOCK_GENERATOR_XOSC32K, 	/* Generic Clock Generator 1 is the source */
		.bit.ID = 0x00			/* Generic Clock Multiplexer 0 (DFLL48M Reference) */
	};
	// Write these settings
	GCLK->CLKCTRL.reg = gclk_clkctrl.reg;
 1a8:	4b28      	ldr	r3, [pc, #160]	; (24c <ClocksInit+0xdc>)
 1aa:	2282      	movs	r2, #130	; 0x82
 1ac:	01d2      	lsls	r2, r2, #7
 1ae:	805a      	strh	r2, [r3, #2]
	// Enable the DFLL48M in open loop mode. Without this step, attempts to go into closed loop mode at 48 MHz will
	// result in Processor Reset (you'll be at the in the Reset_Handler in startup_samd21.c).
	// PCLKSR.DFLLRDY must be one before writing to the DFLL Control register
	// Note that the DFLLRDY bit represents status of register synchronization - NOT clock stability
	// (see Data Sheet 17.6.14 Synchronization for detail)
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 1b0:	4a25      	ldr	r2, [pc, #148]	; (248 <ClocksInit+0xd8>)
 1b2:	68d3      	ldr	r3, [r2, #12]
 1b4:	06db      	lsls	r3, r3, #27
 1b6:	d5fc      	bpl.n	1b2 <ClocksInit+0x42>
	SYSCTRL->DFLLCTRL.reg = (uint16_t)(SYSCTRL_DFLLCTRL_ENABLE);
 1b8:	2202      	movs	r2, #2
 1ba:	4b23      	ldr	r3, [pc, #140]	; (248 <ClocksInit+0xd8>)
 1bc:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 1be:	001a      	movs	r2, r3
 1c0:	68d3      	ldr	r3, [r2, #12]
 1c2:	06db      	lsls	r3, r3, #27
 1c4:	d5fc      	bpl.n	1c0 <ClocksInit+0x50>
		.bit.CSTEP = 31,		/* Coarse step - use half of the max value (63) */
		.bit.FSTEP = 511,		/* Fine step - use half of the max value (1023) */
		.bit.MUL = 1465			/* Multiplier = MAIN_CLK_FREQ (48MHz) / EXT_32K_CLK_FREQ (32768 Hz) */
	};
	// Write these settings
	SYSCTRL->DFLLMUL.reg = sysctrl_dfllmul.reg;
 1c6:	4b20      	ldr	r3, [pc, #128]	; (248 <ClocksInit+0xd8>)
 1c8:	4a22      	ldr	r2, [pc, #136]	; (254 <ClocksInit+0xe4>)
 1ca:	62da      	str	r2, [r3, #44]	; 0x2c
	// Wait for synchronization
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 1cc:	001a      	movs	r2, r3
 1ce:	68d3      	ldr	r3, [r2, #12]
 1d0:	06db      	lsls	r3, r3, #27
 1d2:	d5fc      	bpl.n	1ce <ClocksInit+0x5e>
	
	// To reduce lock time, load factory calibrated values into DFLLVAL (cf. Data Sheet 17.6.7.1)
	// Location of value is defined in Data Sheet Table 10-5. NVM Software Calibration Area Mapping
	
	// Get factory calibrated value for "DFLL48M COARSE CAL" from NVM Software Calibration Area
	tempDFLL48CalibrationCoarse = *(uint32_t*)FUSES_DFLL48M_COARSE_CAL_ADDR;
 1d4:	4b20      	ldr	r3, [pc, #128]	; (258 <ClocksInit+0xe8>)
	tempDFLL48CalibrationCoarse &= FUSES_DFLL48M_COARSE_CAL_Msk;
	tempDFLL48CalibrationCoarse = tempDFLL48CalibrationCoarse>>FUSES_DFLL48M_COARSE_CAL_Pos;
	// Write the coarse calibration value
	SYSCTRL->DFLLVAL.bit.COARSE = tempDFLL48CalibrationCoarse;
 1d6:	681a      	ldr	r2, [r3, #0]
 1d8:	491b      	ldr	r1, [pc, #108]	; (248 <ClocksInit+0xd8>)
 1da:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 1dc:	0e92      	lsrs	r2, r2, #26
 1de:	0292      	lsls	r2, r2, #10
 1e0:	481e      	ldr	r0, [pc, #120]	; (25c <ClocksInit+0xec>)
 1e2:	4003      	ands	r3, r0
 1e4:	4313      	orrs	r3, r2
 1e6:	628b      	str	r3, [r1, #40]	; 0x28
	// Switch DFLL48M to Closed Loop mode and enable WAITLOCK
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 1e8:	000a      	movs	r2, r1
 1ea:	68d3      	ldr	r3, [r2, #12]
 1ec:	06db      	lsls	r3, r3, #27
 1ee:	d5fc      	bpl.n	1ea <ClocksInit+0x7a>
	SYSCTRL->DFLLCTRL.reg |= (uint16_t) (SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_WAITLOCK);
 1f0:	4a15      	ldr	r2, [pc, #84]	; (248 <ClocksInit+0xd8>)
 1f2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 1f4:	491a      	ldr	r1, [pc, #104]	; (260 <ClocksInit+0xf0>)
 1f6:	430b      	orrs	r3, r1
 1f8:	8493      	strh	r3, [r2, #36]	; 0x24
		.bit.IDC = 1,			/* Generator duty cycle is 50/50 */
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x07,		/* Generator source: DFLL48M output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_MAIN			/* Generator ID: 0 */
	};
	GCLK->GENCTRL.reg = gclk_genctrl0.reg;
 1fa:	4b14      	ldr	r3, [pc, #80]	; (24c <ClocksInit+0xdc>)
 1fc:	4a19      	ldr	r2, [pc, #100]	; (264 <ClocksInit+0xf4>)
 1fe:	605a      	str	r2, [r3, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
 200:	001a      	movs	r2, r3
 202:	7853      	ldrb	r3, [r2, #1]
 204:	09db      	lsrs	r3, r3, #7
 206:	d1fc      	bne.n	202 <ClocksInit+0x92>
		.bit.PMUX = 7,			/* Peripheral Function H selected (GCLK_IO[0]) */
		.bit.PMUXEN = 1,		/* Enable peripheral Multiplexer */
		.bit.PINMASK = (uint16_t)(1 << (28-16)) /* Select the pin(s) to be configured */
	};
	// Write these settings
	PORT->Group[0].WRCONFIG.reg = port0_wrconfig.reg;
 208:	4b17      	ldr	r3, [pc, #92]	; (268 <ClocksInit+0xf8>)
 20a:	4a18      	ldr	r2, [pc, #96]	; (26c <ClocksInit+0xfc>)
 20c:	629a      	str	r2, [r3, #40]	; 0x28
	
	/* ----------------------------------------------------------------------------------------------
	* 7) Modify prescaler value of OSC8M to produce 8MHz output
	*/

	SYSCTRL->OSC8M.bit.PRESC = 0;		/* Prescale by 1 */
 20e:	4b0e      	ldr	r3, [pc, #56]	; (248 <ClocksInit+0xd8>)
 210:	6a1a      	ldr	r2, [r3, #32]
 212:	4917      	ldr	r1, [pc, #92]	; (270 <ClocksInit+0x100>)
 214:	400a      	ands	r2, r1
 216:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;	/* Oscillator is always on if enabled */
 218:	6a1a      	ldr	r2, [r3, #32]
 21a:	2180      	movs	r1, #128	; 0x80
 21c:	438a      	bics	r2, r1
 21e:	621a      	str	r2, [r3, #32]
	{
		.bit.DIV = 1,								/* Set output division factor = 1 */
		.bit.ID = GENERIC_CLOCK_GENERATOR_OSC8M		/* Apply division factor to Generator 3 */
	};
	// Write these settings
	GCLK->GENDIV.reg = gclk3_gendiv.reg;
 220:	4b0a      	ldr	r3, [pc, #40]	; (24c <ClocksInit+0xdc>)
 222:	2204      	movs	r2, #4
 224:	32ff      	adds	r2, #255	; 0xff
 226:	609a      	str	r2, [r3, #8]
	
	// Configure Generic Clock Generator 3 with OSC8M as source
	GCLK_GENCTRL_Type gclk3_genctrl = 
 228:	4a12      	ldr	r2, [pc, #72]	; (274 <ClocksInit+0x104>)
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x06,		/* Generator source: OSC8M output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_OSC8M			/* Generator ID: 3 */
	};
	// Write these settings
	GCLK->GENCTRL.reg = gclk3_genctrl.reg;
 22a:	605a      	str	r2, [r3, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
 22c:	001a      	movs	r2, r3
 22e:	7853      	ldrb	r3, [r2, #1]
 230:	09db      	lsrs	r3, r3, #7
 232:	d1fc      	bne.n	22e <ClocksInit+0xbe>
	
	/* ----------------------------------------------------------------------------------------------
	* 9) Set CPU and APBx BUS Clocks to 48MHz
	*/
	PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
 234:	4b10      	ldr	r3, [pc, #64]	; (278 <ClocksInit+0x108>)
 236:	2200      	movs	r2, #0
 238:	721a      	strb	r2, [r3, #8]
	PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
 23a:	725a      	strb	r2, [r3, #9]
	PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
 23c:	729a      	strb	r2, [r3, #10]
	PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
 23e:	72da      	strb	r2, [r3, #11]
	
 240:	4770      	bx	lr
 242:	46c0      	nop			; (mov r8, r8)
 244:	41004000 	.word	0x41004000
 248:	40000800 	.word	0x40000800
 24c:	40000c00 	.word	0x40000c00
 250:	00030501 	.word	0x00030501
 254:	7dff05b9 	.word	0x7dff05b9
 258:	00806024 	.word	0x00806024
 25c:	ffff03ff 	.word	0xffff03ff
 260:	00000804 	.word	0x00000804
 264:	000b0700 	.word	0x000b0700
 268:	41004400 	.word	0x41004400
 26c:	d7011000 	.word	0xd7011000
 270:	fffffcff 	.word	0xfffffcff
 274:	00030603 	.word	0x00030603
 278:	40000400 	.word	0x40000400

0000027c <delay_n_cycles>:
 *
 ******************************************************************************/

void delay_n_cycles(unsigned long n)
{
	__asm (
 27c:	f3bf 8f5f 	dmb	sy
 280:	3801      	subs	r0, #1
 282:	2800      	cmp	r0, #0
 284:	d1fa      	bne.n	27c <delay_n_cycles>
	"loop: DMB	\n"
	"SUB r0, r0, #1 \n"
	"CMP r0, #0  \n"
	"BNE loop         "
	);
} // delay_n_cycles()
 286:	4770      	bx	lr

00000288 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 288:	e7fe      	b.n	288 <Dummy_Handler>
	...

0000028c <Reset_Handler>:
{
 28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 28e:	4a2a      	ldr	r2, [pc, #168]	; (338 <Reset_Handler+0xac>)
 290:	4b2a      	ldr	r3, [pc, #168]	; (33c <Reset_Handler+0xb0>)
 292:	429a      	cmp	r2, r3
 294:	d011      	beq.n	2ba <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 296:	001a      	movs	r2, r3
 298:	4b29      	ldr	r3, [pc, #164]	; (340 <Reset_Handler+0xb4>)
 29a:	429a      	cmp	r2, r3
 29c:	d20d      	bcs.n	2ba <Reset_Handler+0x2e>
 29e:	4a29      	ldr	r2, [pc, #164]	; (344 <Reset_Handler+0xb8>)
 2a0:	3303      	adds	r3, #3
 2a2:	1a9b      	subs	r3, r3, r2
 2a4:	089b      	lsrs	r3, r3, #2
 2a6:	3301      	adds	r3, #1
 2a8:	009b      	lsls	r3, r3, #2
 2aa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 2ac:	4823      	ldr	r0, [pc, #140]	; (33c <Reset_Handler+0xb0>)
 2ae:	4922      	ldr	r1, [pc, #136]	; (338 <Reset_Handler+0xac>)
 2b0:	588c      	ldr	r4, [r1, r2]
 2b2:	5084      	str	r4, [r0, r2]
 2b4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 2b6:	429a      	cmp	r2, r3
 2b8:	d1fa      	bne.n	2b0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 2ba:	4a23      	ldr	r2, [pc, #140]	; (348 <Reset_Handler+0xbc>)
 2bc:	4b23      	ldr	r3, [pc, #140]	; (34c <Reset_Handler+0xc0>)
 2be:	429a      	cmp	r2, r3
 2c0:	d20a      	bcs.n	2d8 <Reset_Handler+0x4c>
 2c2:	43d3      	mvns	r3, r2
 2c4:	4921      	ldr	r1, [pc, #132]	; (34c <Reset_Handler+0xc0>)
 2c6:	185b      	adds	r3, r3, r1
 2c8:	2103      	movs	r1, #3
 2ca:	438b      	bics	r3, r1
 2cc:	3304      	adds	r3, #4
 2ce:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 2d0:	2100      	movs	r1, #0
 2d2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 2d4:	4293      	cmp	r3, r2
 2d6:	d1fc      	bne.n	2d2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 2d8:	4a1d      	ldr	r2, [pc, #116]	; (350 <Reset_Handler+0xc4>)
 2da:	21ff      	movs	r1, #255	; 0xff
 2dc:	4b1d      	ldr	r3, [pc, #116]	; (354 <Reset_Handler+0xc8>)
 2de:	438b      	bics	r3, r1
 2e0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 2e2:	39fd      	subs	r1, #253	; 0xfd
 2e4:	2390      	movs	r3, #144	; 0x90
 2e6:	005b      	lsls	r3, r3, #1
 2e8:	4a1b      	ldr	r2, [pc, #108]	; (358 <Reset_Handler+0xcc>)
 2ea:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 2ec:	4a1b      	ldr	r2, [pc, #108]	; (35c <Reset_Handler+0xd0>)
 2ee:	78d3      	ldrb	r3, [r2, #3]
 2f0:	2503      	movs	r5, #3
 2f2:	43ab      	bics	r3, r5
 2f4:	2402      	movs	r4, #2
 2f6:	4323      	orrs	r3, r4
 2f8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 2fa:	78d3      	ldrb	r3, [r2, #3]
 2fc:	270c      	movs	r7, #12
 2fe:	43bb      	bics	r3, r7
 300:	2608      	movs	r6, #8
 302:	4333      	orrs	r3, r6
 304:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 306:	4b16      	ldr	r3, [pc, #88]	; (360 <Reset_Handler+0xd4>)
 308:	7b98      	ldrb	r0, [r3, #14]
 30a:	2230      	movs	r2, #48	; 0x30
 30c:	4390      	bics	r0, r2
 30e:	2220      	movs	r2, #32
 310:	4310      	orrs	r0, r2
 312:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 314:	7b99      	ldrb	r1, [r3, #14]
 316:	43b9      	bics	r1, r7
 318:	4331      	orrs	r1, r6
 31a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 31c:	7b9a      	ldrb	r2, [r3, #14]
 31e:	43aa      	bics	r2, r5
 320:	4322      	orrs	r2, r4
 322:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 324:	4a0f      	ldr	r2, [pc, #60]	; (364 <Reset_Handler+0xd8>)
 326:	6853      	ldr	r3, [r2, #4]
 328:	2180      	movs	r1, #128	; 0x80
 32a:	430b      	orrs	r3, r1
 32c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 32e:	4b0e      	ldr	r3, [pc, #56]	; (368 <Reset_Handler+0xdc>)
 330:	4798      	blx	r3
        main();
 332:	4b0e      	ldr	r3, [pc, #56]	; (36c <Reset_Handler+0xe0>)
 334:	4798      	blx	r3
 336:	e7fe      	b.n	336 <Reset_Handler+0xaa>
 338:	00000848 	.word	0x00000848
 33c:	20000000 	.word	0x20000000
 340:	2000042c 	.word	0x2000042c
 344:	20000004 	.word	0x20000004
 348:	2000042c 	.word	0x2000042c
 34c:	2000046c 	.word	0x2000046c
 350:	e000ed00 	.word	0xe000ed00
 354:	00000000 	.word	0x00000000
 358:	41007000 	.word	0x41007000
 35c:	41005000 	.word	0x41005000
 360:	41004800 	.word	0x41004800
 364:	41004000 	.word	0x41004000
 368:	00000679 	.word	0x00000679
 36c:	00000371 	.word	0x00000371

00000370 <main>:
 *
 * Note:
 *
 ******************************************************************************/
int main(void)
{
 370:	b510      	push	{r4, lr}
	// CMSIS compliant function not used
	//SystemInit();
	
	// Application hardware and software initialization 
	AppInit();
 372:	4b02      	ldr	r3, [pc, #8]	; (37c <main+0xc>)
 374:	4798      	blx	r3

	// Super loop
	while(1)
	{
		// Run your application
		AppRun();
 376:	4c02      	ldr	r4, [pc, #8]	; (380 <main+0x10>)
 378:	47a0      	blx	r4
 37a:	e7fd      	b.n	378 <main+0x8>
 37c:	00000115 	.word	0x00000115
 380:	00000135 	.word	0x00000135

00000384 <UART3_Init>:
 *
 * Note:            
 *
 ******************************************************************************/
void UART3_Init(uint32_t baud)
{
 384:	b570      	push	{r4, r5, r6, lr}
	
	/* -------------------------------------------------
	* 1) Enable bus clock to APBC mask
	*/
	REG_PM_APBCMASK |=  PM_APBCMASK_SERCOM3;
 386:	4a21      	ldr	r2, [pc, #132]	; (40c <UART3_Init+0x88>)
 388:	6813      	ldr	r3, [r2, #0]
 38a:	2120      	movs	r1, #32
 38c:	430b      	orrs	r3, r1
 38e:	6013      	str	r3, [r2, #0]
	
    /* -------------------------------------------------
	* 2) select UART clock
	*/
	GCLK->CLKCTRL.reg =  
 390:	4a1f      	ldr	r2, [pc, #124]	; (410 <UART3_Init+0x8c>)
 392:	4b20      	ldr	r3, [pc, #128]	; (414 <UART3_Init+0x90>)
 394:	805a      	strh	r2, [r3, #2]
	
	/* --------------------------------------------------
	* 3) Configure PA22 as TX Pin
	*/
	// Set pin direction to output
	PORT->Group[0].DIRSET.reg = (1 << 22);     
 396:	4b20      	ldr	r3, [pc, #128]	; (418 <UART3_Init+0x94>)
 398:	2280      	movs	r2, #128	; 0x80
 39a:	03d2      	lsls	r2, r2, #15
 39c:	609a      	str	r2, [r3, #8]
	
    // Enable PMUX
	PORT->Group[0].PINCFG[22].reg |= PORT_PINCFG_PMUXEN;   
 39e:	2256      	movs	r2, #86	; 0x56
 3a0:	5c99      	ldrb	r1, [r3, r2]
 3a2:	2601      	movs	r6, #1
 3a4:	4331      	orrs	r1, r6
 3a6:	b2c9      	uxtb	r1, r1
 3a8:	5499      	strb	r1, [r3, r2]
	
	// Enable PMUX and set the PMUX bit, since pin is even we use PMUXE
	PORT->Group[0].PMUX[22>>1].bit.PMUXE = PORT_PMUX_PMUXE_C_Val;
 3aa:	243b      	movs	r4, #59	; 0x3b
 3ac:	5d19      	ldrb	r1, [r3, r4]
 3ae:	3a47      	subs	r2, #71	; 0x47
 3b0:	4391      	bics	r1, r2
 3b2:	2202      	movs	r2, #2
 3b4:	4311      	orrs	r1, r2
 3b6:	5519      	strb	r1, [r3, r4]
	
	/* ---------------------------------------------------
	* 4) Configure PA23 as RX Pin
	*/
	// Set pin direction to input
	PORT->Group[0].DIRCLR.reg = (1 << 23);       
 3b8:	2280      	movs	r2, #128	; 0x80
 3ba:	0412      	lsls	r2, r2, #16
 3bc:	605a      	str	r2, [r3, #4]

	// Enable pull down resistor
	PORT->Group[0].PINCFG[23].reg &= ~PORT_PINCFG_PULLEN;   
 3be:	2157      	movs	r1, #87	; 0x57
 3c0:	5c5d      	ldrb	r5, [r3, r1]
 3c2:	2204      	movs	r2, #4
 3c4:	4395      	bics	r5, r2
 3c6:	545d      	strb	r5, [r3, r1]
	
	// Enable PMUX and set the PMUX bit, since pin is odd we use PMUX0
	PORT->Group[0].PINCFG[23].reg |= PORT_PINCFG_PMUXEN; 
 3c8:	5c5a      	ldrb	r2, [r3, r1]
 3ca:	4332      	orrs	r2, r6
 3cc:	b2d2      	uxtb	r2, r2
 3ce:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[23>>1].bit.PMUXO = PORT_PMUX_PMUXO_C_Val; 
 3d0:	5d19      	ldrb	r1, [r3, r4]
 3d2:	220f      	movs	r2, #15
 3d4:	400a      	ands	r2, r1
 3d6:	2120      	movs	r1, #32
 3d8:	430a      	orrs	r2, r1
 3da:	551a      	strb	r2, [r3, r4]
	
	
	/* ----------------------------------------------------
	* 5) Configure USART via Control A and Control B 
	*/
	SERCOM3->USART.CTRLA.reg =                  // USART is ASYNCHRONOUS
 3dc:	4c0f      	ldr	r4, [pc, #60]	; (41c <UART3_Init+0x98>)
 3de:	4b10      	ldr	r3, [pc, #64]	; (420 <UART3_Init+0x9c>)
 3e0:	6023      	str	r3, [r4, #0]
	   SERCOM_USART_CTRLA_MODE_USART_INT_CLK |  // Set Internal Clock 
	   SERCOM_USART_CTRLA_RXPO(1) |             // Use SERCOM pad 1 for data reception
	   SERCOM_USART_CTRLA_TXPO(0/*PAD0*/);      // Set SERCOM pad 0 for data transmission
	
	
	SERCOM3->USART.CTRLB.reg =        // We don't use PARITY
 3e2:	23c0      	movs	r3, #192	; 0xc0
 3e4:	029b      	lsls	r3, r3, #10
 3e6:	6063      	str	r3, [r4, #4]
	
	/* -----------------------------------------------------
	* 6) Set USART Baud Rate
	*/
	// Baud rate is (65536) * (CPU_CLock - 16 * wanted baud) / CPU_Clock
	uint64_t baudRate = (uint64_t)65536 * (F_CPU - 16 * baud) / F_CPU;
 3e8:	0100      	lsls	r0, r0, #4
 3ea:	4240      	negs	r0, r0
 3ec:	4b0d      	ldr	r3, [pc, #52]	; (424 <UART3_Init+0xa0>)
 3ee:	469c      	mov	ip, r3
 3f0:	4460      	add	r0, ip
 3f2:	0c01      	lsrs	r1, r0, #16
 3f4:	0400      	lsls	r0, r0, #16
 3f6:	4a0b      	ldr	r2, [pc, #44]	; (424 <UART3_Init+0xa0>)
 3f8:	2300      	movs	r3, #0
 3fa:	4d0b      	ldr	r5, [pc, #44]	; (428 <UART3_Init+0xa4>)
 3fc:	47a8      	blx	r5
	
	// Set Baud Rate
	SERCOM3->USART.BAUD.reg = (uint32_t)baudRate;
 3fe:	b280      	uxth	r0, r0
 400:	81a0      	strh	r0, [r4, #12]

    /* ------------------------------------------------------
	* 7) Enable the USART
	*/
	// SERCOM3 peripheral enabled
	SERCOM3->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 402:	6823      	ldr	r3, [r4, #0]
 404:	2202      	movs	r2, #2
 406:	4313      	orrs	r3, r2
 408:	6023      	str	r3, [r4, #0]
}  // UART3_Init()
 40a:	bd70      	pop	{r4, r5, r6, pc}
 40c:	40000420 	.word	0x40000420
 410:	00004017 	.word	0x00004017
 414:	40000c00 	.word	0x40000c00
 418:	41004400 	.word	0x41004400
 41c:	42001400 	.word	0x42001400
 420:	40100004 	.word	0x40100004
 424:	02dc6c00 	.word	0x02dc6c00
 428:	00000461 	.word	0x00000461

0000042c <UART3_Write>:
 *
 ******************************************************************************/
void UART3_Write(char data)
{
	// Wait on interrupt flag and Write some data
	while(!(REG_SERCOM3_USART_INTFLAG) & 1)
 42c:	4a03      	ldr	r2, [pc, #12]	; (43c <UART3_Write+0x10>)
 42e:	7813      	ldrb	r3, [r2, #0]
 430:	2b00      	cmp	r3, #0
 432:	d0fc      	beq.n	42e <UART3_Write+0x2>
	{
		
	}
	
	REG_SERCOM3_USART_DATA = data;
 434:	b280      	uxth	r0, r0
 436:	4b02      	ldr	r3, [pc, #8]	; (440 <UART3_Write+0x14>)
 438:	8018      	strh	r0, [r3, #0]
} //UART3_Write()
 43a:	4770      	bx	lr
 43c:	42001418 	.word	0x42001418
 440:	42001428 	.word	0x42001428

00000444 <UART3_Has_Data>:
 *
 ******************************************************************************/
bool UART3_Has_Data()
{
	// if we have data
	if ((SERCOM3->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos)
 444:	4b02      	ldr	r3, [pc, #8]	; (450 <UART3_Has_Data+0xc>)
 446:	7e18      	ldrb	r0, [r3, #24]
 448:	0740      	lsls	r0, r0, #29
 44a:	0fc0      	lsrs	r0, r0, #31
		return true;
	}
	
	// else return false
	return false;
}  // UART3_Has_Data()
 44c:	4770      	bx	lr
 44e:	46c0      	nop			; (mov r8, r8)
 450:	42001400 	.word	0x42001400

00000454 <UART3_Read>:
 *
 ******************************************************************************/
char UART3_Read()
{
	// return data in the USART data register
	return SERCOM3->USART.DATA.reg;
 454:	4b01      	ldr	r3, [pc, #4]	; (45c <UART3_Read+0x8>)
 456:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 458:	b2c0      	uxtb	r0, r0
 45a:	4770      	bx	lr
 45c:	42001400 	.word	0x42001400

00000460 <__aeabi_uldivmod>:
 460:	2b00      	cmp	r3, #0
 462:	d111      	bne.n	488 <__aeabi_uldivmod+0x28>
 464:	2a00      	cmp	r2, #0
 466:	d10f      	bne.n	488 <__aeabi_uldivmod+0x28>
 468:	2900      	cmp	r1, #0
 46a:	d100      	bne.n	46e <__aeabi_uldivmod+0xe>
 46c:	2800      	cmp	r0, #0
 46e:	d002      	beq.n	476 <__aeabi_uldivmod+0x16>
 470:	2100      	movs	r1, #0
 472:	43c9      	mvns	r1, r1
 474:	1c08      	adds	r0, r1, #0
 476:	b407      	push	{r0, r1, r2}
 478:	4802      	ldr	r0, [pc, #8]	; (484 <__aeabi_uldivmod+0x24>)
 47a:	a102      	add	r1, pc, #8	; (adr r1, 484 <__aeabi_uldivmod+0x24>)
 47c:	1840      	adds	r0, r0, r1
 47e:	9002      	str	r0, [sp, #8]
 480:	bd03      	pop	{r0, r1, pc}
 482:	46c0      	nop			; (mov r8, r8)
 484:	0000019d 	.word	0x0000019d
 488:	b403      	push	{r0, r1}
 48a:	4668      	mov	r0, sp
 48c:	b501      	push	{r0, lr}
 48e:	9802      	ldr	r0, [sp, #8]
 490:	f000 f806 	bl	4a0 <__udivmoddi4>
 494:	9b01      	ldr	r3, [sp, #4]
 496:	469e      	mov	lr, r3
 498:	b002      	add	sp, #8
 49a:	bc0c      	pop	{r2, r3}
 49c:	4770      	bx	lr
 49e:	46c0      	nop			; (mov r8, r8)

000004a0 <__udivmoddi4>:
 4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 4a2:	4657      	mov	r7, sl
 4a4:	464e      	mov	r6, r9
 4a6:	4645      	mov	r5, r8
 4a8:	46de      	mov	lr, fp
 4aa:	b5e0      	push	{r5, r6, r7, lr}
 4ac:	0004      	movs	r4, r0
 4ae:	b083      	sub	sp, #12
 4b0:	000d      	movs	r5, r1
 4b2:	4692      	mov	sl, r2
 4b4:	4699      	mov	r9, r3
 4b6:	428b      	cmp	r3, r1
 4b8:	d82f      	bhi.n	51a <__udivmoddi4+0x7a>
 4ba:	d02c      	beq.n	516 <__udivmoddi4+0x76>
 4bc:	4649      	mov	r1, r9
 4be:	4650      	mov	r0, sl
 4c0:	f000 f8b0 	bl	624 <__clzdi2>
 4c4:	0029      	movs	r1, r5
 4c6:	0006      	movs	r6, r0
 4c8:	0020      	movs	r0, r4
 4ca:	f000 f8ab 	bl	624 <__clzdi2>
 4ce:	1a33      	subs	r3, r6, r0
 4d0:	4698      	mov	r8, r3
 4d2:	3b20      	subs	r3, #32
 4d4:	469b      	mov	fp, r3
 4d6:	d500      	bpl.n	4da <__udivmoddi4+0x3a>
 4d8:	e074      	b.n	5c4 <__udivmoddi4+0x124>
 4da:	4653      	mov	r3, sl
 4dc:	465a      	mov	r2, fp
 4de:	4093      	lsls	r3, r2
 4e0:	001f      	movs	r7, r3
 4e2:	4653      	mov	r3, sl
 4e4:	4642      	mov	r2, r8
 4e6:	4093      	lsls	r3, r2
 4e8:	001e      	movs	r6, r3
 4ea:	42af      	cmp	r7, r5
 4ec:	d829      	bhi.n	542 <__udivmoddi4+0xa2>
 4ee:	d026      	beq.n	53e <__udivmoddi4+0x9e>
 4f0:	465b      	mov	r3, fp
 4f2:	1ba4      	subs	r4, r4, r6
 4f4:	41bd      	sbcs	r5, r7
 4f6:	2b00      	cmp	r3, #0
 4f8:	da00      	bge.n	4fc <__udivmoddi4+0x5c>
 4fa:	e079      	b.n	5f0 <__udivmoddi4+0x150>
 4fc:	2200      	movs	r2, #0
 4fe:	2300      	movs	r3, #0
 500:	9200      	str	r2, [sp, #0]
 502:	9301      	str	r3, [sp, #4]
 504:	2301      	movs	r3, #1
 506:	465a      	mov	r2, fp
 508:	4093      	lsls	r3, r2
 50a:	9301      	str	r3, [sp, #4]
 50c:	2301      	movs	r3, #1
 50e:	4642      	mov	r2, r8
 510:	4093      	lsls	r3, r2
 512:	9300      	str	r3, [sp, #0]
 514:	e019      	b.n	54a <__udivmoddi4+0xaa>
 516:	4282      	cmp	r2, r0
 518:	d9d0      	bls.n	4bc <__udivmoddi4+0x1c>
 51a:	2200      	movs	r2, #0
 51c:	2300      	movs	r3, #0
 51e:	9200      	str	r2, [sp, #0]
 520:	9301      	str	r3, [sp, #4]
 522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 524:	2b00      	cmp	r3, #0
 526:	d001      	beq.n	52c <__udivmoddi4+0x8c>
 528:	601c      	str	r4, [r3, #0]
 52a:	605d      	str	r5, [r3, #4]
 52c:	9800      	ldr	r0, [sp, #0]
 52e:	9901      	ldr	r1, [sp, #4]
 530:	b003      	add	sp, #12
 532:	bc3c      	pop	{r2, r3, r4, r5}
 534:	4690      	mov	r8, r2
 536:	4699      	mov	r9, r3
 538:	46a2      	mov	sl, r4
 53a:	46ab      	mov	fp, r5
 53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 53e:	42a3      	cmp	r3, r4
 540:	d9d6      	bls.n	4f0 <__udivmoddi4+0x50>
 542:	2200      	movs	r2, #0
 544:	2300      	movs	r3, #0
 546:	9200      	str	r2, [sp, #0]
 548:	9301      	str	r3, [sp, #4]
 54a:	4643      	mov	r3, r8
 54c:	2b00      	cmp	r3, #0
 54e:	d0e8      	beq.n	522 <__udivmoddi4+0x82>
 550:	07fb      	lsls	r3, r7, #31
 552:	0872      	lsrs	r2, r6, #1
 554:	431a      	orrs	r2, r3
 556:	4646      	mov	r6, r8
 558:	087b      	lsrs	r3, r7, #1
 55a:	e00e      	b.n	57a <__udivmoddi4+0xda>
 55c:	42ab      	cmp	r3, r5
 55e:	d101      	bne.n	564 <__udivmoddi4+0xc4>
 560:	42a2      	cmp	r2, r4
 562:	d80c      	bhi.n	57e <__udivmoddi4+0xde>
 564:	1aa4      	subs	r4, r4, r2
 566:	419d      	sbcs	r5, r3
 568:	2001      	movs	r0, #1
 56a:	1924      	adds	r4, r4, r4
 56c:	416d      	adcs	r5, r5
 56e:	2100      	movs	r1, #0
 570:	3e01      	subs	r6, #1
 572:	1824      	adds	r4, r4, r0
 574:	414d      	adcs	r5, r1
 576:	2e00      	cmp	r6, #0
 578:	d006      	beq.n	588 <__udivmoddi4+0xe8>
 57a:	42ab      	cmp	r3, r5
 57c:	d9ee      	bls.n	55c <__udivmoddi4+0xbc>
 57e:	3e01      	subs	r6, #1
 580:	1924      	adds	r4, r4, r4
 582:	416d      	adcs	r5, r5
 584:	2e00      	cmp	r6, #0
 586:	d1f8      	bne.n	57a <__udivmoddi4+0xda>
 588:	465b      	mov	r3, fp
 58a:	9800      	ldr	r0, [sp, #0]
 58c:	9901      	ldr	r1, [sp, #4]
 58e:	1900      	adds	r0, r0, r4
 590:	4169      	adcs	r1, r5
 592:	2b00      	cmp	r3, #0
 594:	db22      	blt.n	5dc <__udivmoddi4+0x13c>
 596:	002b      	movs	r3, r5
 598:	465a      	mov	r2, fp
 59a:	40d3      	lsrs	r3, r2
 59c:	002a      	movs	r2, r5
 59e:	4644      	mov	r4, r8
 5a0:	40e2      	lsrs	r2, r4
 5a2:	001c      	movs	r4, r3
 5a4:	465b      	mov	r3, fp
 5a6:	0015      	movs	r5, r2
 5a8:	2b00      	cmp	r3, #0
 5aa:	db2c      	blt.n	606 <__udivmoddi4+0x166>
 5ac:	0026      	movs	r6, r4
 5ae:	409e      	lsls	r6, r3
 5b0:	0033      	movs	r3, r6
 5b2:	0026      	movs	r6, r4
 5b4:	4647      	mov	r7, r8
 5b6:	40be      	lsls	r6, r7
 5b8:	0032      	movs	r2, r6
 5ba:	1a80      	subs	r0, r0, r2
 5bc:	4199      	sbcs	r1, r3
 5be:	9000      	str	r0, [sp, #0]
 5c0:	9101      	str	r1, [sp, #4]
 5c2:	e7ae      	b.n	522 <__udivmoddi4+0x82>
 5c4:	4642      	mov	r2, r8
 5c6:	2320      	movs	r3, #32
 5c8:	1a9b      	subs	r3, r3, r2
 5ca:	4652      	mov	r2, sl
 5cc:	40da      	lsrs	r2, r3
 5ce:	4641      	mov	r1, r8
 5d0:	0013      	movs	r3, r2
 5d2:	464a      	mov	r2, r9
 5d4:	408a      	lsls	r2, r1
 5d6:	0017      	movs	r7, r2
 5d8:	431f      	orrs	r7, r3
 5da:	e782      	b.n	4e2 <__udivmoddi4+0x42>
 5dc:	4642      	mov	r2, r8
 5de:	2320      	movs	r3, #32
 5e0:	1a9b      	subs	r3, r3, r2
 5e2:	002a      	movs	r2, r5
 5e4:	4646      	mov	r6, r8
 5e6:	409a      	lsls	r2, r3
 5e8:	0023      	movs	r3, r4
 5ea:	40f3      	lsrs	r3, r6
 5ec:	4313      	orrs	r3, r2
 5ee:	e7d5      	b.n	59c <__udivmoddi4+0xfc>
 5f0:	4642      	mov	r2, r8
 5f2:	2320      	movs	r3, #32
 5f4:	2100      	movs	r1, #0
 5f6:	1a9b      	subs	r3, r3, r2
 5f8:	2200      	movs	r2, #0
 5fa:	9100      	str	r1, [sp, #0]
 5fc:	9201      	str	r2, [sp, #4]
 5fe:	2201      	movs	r2, #1
 600:	40da      	lsrs	r2, r3
 602:	9201      	str	r2, [sp, #4]
 604:	e782      	b.n	50c <__udivmoddi4+0x6c>
 606:	4642      	mov	r2, r8
 608:	2320      	movs	r3, #32
 60a:	0026      	movs	r6, r4
 60c:	1a9b      	subs	r3, r3, r2
 60e:	40de      	lsrs	r6, r3
 610:	002f      	movs	r7, r5
 612:	46b4      	mov	ip, r6
 614:	4097      	lsls	r7, r2
 616:	4666      	mov	r6, ip
 618:	003b      	movs	r3, r7
 61a:	4333      	orrs	r3, r6
 61c:	e7c9      	b.n	5b2 <__udivmoddi4+0x112>
 61e:	46c0      	nop			; (mov r8, r8)

00000620 <__aeabi_idiv0>:
 620:	4770      	bx	lr
 622:	46c0      	nop			; (mov r8, r8)

00000624 <__clzdi2>:
 624:	b510      	push	{r4, lr}
 626:	2900      	cmp	r1, #0
 628:	d103      	bne.n	632 <__clzdi2+0xe>
 62a:	f000 f807 	bl	63c <__clzsi2>
 62e:	3020      	adds	r0, #32
 630:	e002      	b.n	638 <__clzdi2+0x14>
 632:	1c08      	adds	r0, r1, #0
 634:	f000 f802 	bl	63c <__clzsi2>
 638:	bd10      	pop	{r4, pc}
 63a:	46c0      	nop			; (mov r8, r8)

0000063c <__clzsi2>:
 63c:	211c      	movs	r1, #28
 63e:	2301      	movs	r3, #1
 640:	041b      	lsls	r3, r3, #16
 642:	4298      	cmp	r0, r3
 644:	d301      	bcc.n	64a <__clzsi2+0xe>
 646:	0c00      	lsrs	r0, r0, #16
 648:	3910      	subs	r1, #16
 64a:	0a1b      	lsrs	r3, r3, #8
 64c:	4298      	cmp	r0, r3
 64e:	d301      	bcc.n	654 <__clzsi2+0x18>
 650:	0a00      	lsrs	r0, r0, #8
 652:	3908      	subs	r1, #8
 654:	091b      	lsrs	r3, r3, #4
 656:	4298      	cmp	r0, r3
 658:	d301      	bcc.n	65e <__clzsi2+0x22>
 65a:	0900      	lsrs	r0, r0, #4
 65c:	3904      	subs	r1, #4
 65e:	a202      	add	r2, pc, #8	; (adr r2, 668 <__clzsi2+0x2c>)
 660:	5c10      	ldrb	r0, [r2, r0]
 662:	1840      	adds	r0, r0, r1
 664:	4770      	bx	lr
 666:	46c0      	nop			; (mov r8, r8)
 668:	02020304 	.word	0x02020304
 66c:	01010101 	.word	0x01010101
	...

00000678 <__libc_init_array>:
 678:	b570      	push	{r4, r5, r6, lr}
 67a:	4e0d      	ldr	r6, [pc, #52]	; (6b0 <__libc_init_array+0x38>)
 67c:	4d0d      	ldr	r5, [pc, #52]	; (6b4 <__libc_init_array+0x3c>)
 67e:	2400      	movs	r4, #0
 680:	1bad      	subs	r5, r5, r6
 682:	10ad      	asrs	r5, r5, #2
 684:	d005      	beq.n	692 <__libc_init_array+0x1a>
 686:	00a3      	lsls	r3, r4, #2
 688:	58f3      	ldr	r3, [r6, r3]
 68a:	3401      	adds	r4, #1
 68c:	4798      	blx	r3
 68e:	42a5      	cmp	r5, r4
 690:	d1f9      	bne.n	686 <__libc_init_array+0xe>
 692:	f000 f8c3 	bl	81c <_init>
 696:	4e08      	ldr	r6, [pc, #32]	; (6b8 <__libc_init_array+0x40>)
 698:	4d08      	ldr	r5, [pc, #32]	; (6bc <__libc_init_array+0x44>)
 69a:	2400      	movs	r4, #0
 69c:	1bad      	subs	r5, r5, r6
 69e:	10ad      	asrs	r5, r5, #2
 6a0:	d005      	beq.n	6ae <__libc_init_array+0x36>
 6a2:	00a3      	lsls	r3, r4, #2
 6a4:	58f3      	ldr	r3, [r6, r3]
 6a6:	3401      	adds	r4, #1
 6a8:	4798      	blx	r3
 6aa:	42a5      	cmp	r5, r4
 6ac:	d1f9      	bne.n	6a2 <__libc_init_array+0x2a>
 6ae:	bd70      	pop	{r4, r5, r6, pc}
 6b0:	00000828 	.word	0x00000828
 6b4:	00000828 	.word	0x00000828
 6b8:	00000828 	.word	0x00000828
 6bc:	00000830 	.word	0x00000830

000006c0 <register_fini>:
 6c0:	4b03      	ldr	r3, [pc, #12]	; (6d0 <register_fini+0x10>)
 6c2:	b510      	push	{r4, lr}
 6c4:	2b00      	cmp	r3, #0
 6c6:	d002      	beq.n	6ce <register_fini+0xe>
 6c8:	4802      	ldr	r0, [pc, #8]	; (6d4 <register_fini+0x14>)
 6ca:	f000 f805 	bl	6d8 <atexit>
 6ce:	bd10      	pop	{r4, pc}
 6d0:	00000000 	.word	0x00000000
 6d4:	000006e9 	.word	0x000006e9

000006d8 <atexit>:
 6d8:	b510      	push	{r4, lr}
 6da:	0001      	movs	r1, r0
 6dc:	2300      	movs	r3, #0
 6de:	2200      	movs	r2, #0
 6e0:	2000      	movs	r0, #0
 6e2:	f000 f81f 	bl	724 <__register_exitproc>
 6e6:	bd10      	pop	{r4, pc}

000006e8 <__libc_fini_array>:
 6e8:	b570      	push	{r4, r5, r6, lr}
 6ea:	4b09      	ldr	r3, [pc, #36]	; (710 <__libc_fini_array+0x28>)
 6ec:	4c09      	ldr	r4, [pc, #36]	; (714 <__libc_fini_array+0x2c>)
 6ee:	1ae4      	subs	r4, r4, r3
 6f0:	10a4      	asrs	r4, r4, #2
 6f2:	d009      	beq.n	708 <__libc_fini_array+0x20>
 6f4:	4a08      	ldr	r2, [pc, #32]	; (718 <__libc_fini_array+0x30>)
 6f6:	18a5      	adds	r5, r4, r2
 6f8:	00ad      	lsls	r5, r5, #2
 6fa:	18ed      	adds	r5, r5, r3
 6fc:	682b      	ldr	r3, [r5, #0]
 6fe:	3c01      	subs	r4, #1
 700:	4798      	blx	r3
 702:	3d04      	subs	r5, #4
 704:	2c00      	cmp	r4, #0
 706:	d1f9      	bne.n	6fc <__libc_fini_array+0x14>
 708:	f000 f892 	bl	830 <_fini>
 70c:	bd70      	pop	{r4, r5, r6, pc}
 70e:	46c0      	nop			; (mov r8, r8)
 710:	0000083c 	.word	0x0000083c
 714:	00000840 	.word	0x00000840
 718:	3fffffff 	.word	0x3fffffff

0000071c <__retarget_lock_acquire_recursive>:
 71c:	4770      	bx	lr
 71e:	46c0      	nop			; (mov r8, r8)

00000720 <__retarget_lock_release_recursive>:
 720:	4770      	bx	lr
 722:	46c0      	nop			; (mov r8, r8)

00000724 <__register_exitproc>:
 724:	b5f0      	push	{r4, r5, r6, r7, lr}
 726:	464e      	mov	r6, r9
 728:	4645      	mov	r5, r8
 72a:	46de      	mov	lr, fp
 72c:	4657      	mov	r7, sl
 72e:	b5e0      	push	{r5, r6, r7, lr}
 730:	4d36      	ldr	r5, [pc, #216]	; (80c <__register_exitproc+0xe8>)
 732:	b083      	sub	sp, #12
 734:	0006      	movs	r6, r0
 736:	6828      	ldr	r0, [r5, #0]
 738:	4698      	mov	r8, r3
 73a:	000f      	movs	r7, r1
 73c:	4691      	mov	r9, r2
 73e:	f7ff ffed 	bl	71c <__retarget_lock_acquire_recursive>
 742:	4b33      	ldr	r3, [pc, #204]	; (810 <__register_exitproc+0xec>)
 744:	681c      	ldr	r4, [r3, #0]
 746:	23a4      	movs	r3, #164	; 0xa4
 748:	005b      	lsls	r3, r3, #1
 74a:	58e0      	ldr	r0, [r4, r3]
 74c:	2800      	cmp	r0, #0
 74e:	d052      	beq.n	7f6 <__register_exitproc+0xd2>
 750:	6843      	ldr	r3, [r0, #4]
 752:	2b1f      	cmp	r3, #31
 754:	dc13      	bgt.n	77e <__register_exitproc+0x5a>
 756:	1c5a      	adds	r2, r3, #1
 758:	9201      	str	r2, [sp, #4]
 75a:	2e00      	cmp	r6, #0
 75c:	d128      	bne.n	7b0 <__register_exitproc+0x8c>
 75e:	9a01      	ldr	r2, [sp, #4]
 760:	3302      	adds	r3, #2
 762:	009b      	lsls	r3, r3, #2
 764:	6042      	str	r2, [r0, #4]
 766:	501f      	str	r7, [r3, r0]
 768:	6828      	ldr	r0, [r5, #0]
 76a:	f7ff ffd9 	bl	720 <__retarget_lock_release_recursive>
 76e:	2000      	movs	r0, #0
 770:	b003      	add	sp, #12
 772:	bc3c      	pop	{r2, r3, r4, r5}
 774:	4690      	mov	r8, r2
 776:	4699      	mov	r9, r3
 778:	46a2      	mov	sl, r4
 77a:	46ab      	mov	fp, r5
 77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 77e:	4b25      	ldr	r3, [pc, #148]	; (814 <__register_exitproc+0xf0>)
 780:	2b00      	cmp	r3, #0
 782:	d03d      	beq.n	800 <__register_exitproc+0xdc>
 784:	20c8      	movs	r0, #200	; 0xc8
 786:	0040      	lsls	r0, r0, #1
 788:	e000      	b.n	78c <__register_exitproc+0x68>
 78a:	bf00      	nop
 78c:	2800      	cmp	r0, #0
 78e:	d037      	beq.n	800 <__register_exitproc+0xdc>
 790:	22a4      	movs	r2, #164	; 0xa4
 792:	2300      	movs	r3, #0
 794:	0052      	lsls	r2, r2, #1
 796:	58a1      	ldr	r1, [r4, r2]
 798:	6043      	str	r3, [r0, #4]
 79a:	6001      	str	r1, [r0, #0]
 79c:	50a0      	str	r0, [r4, r2]
 79e:	3240      	adds	r2, #64	; 0x40
 7a0:	5083      	str	r3, [r0, r2]
 7a2:	3204      	adds	r2, #4
 7a4:	5083      	str	r3, [r0, r2]
 7a6:	3301      	adds	r3, #1
 7a8:	9301      	str	r3, [sp, #4]
 7aa:	2300      	movs	r3, #0
 7ac:	2e00      	cmp	r6, #0
 7ae:	d0d6      	beq.n	75e <__register_exitproc+0x3a>
 7b0:	009a      	lsls	r2, r3, #2
 7b2:	4692      	mov	sl, r2
 7b4:	4482      	add	sl, r0
 7b6:	464a      	mov	r2, r9
 7b8:	2188      	movs	r1, #136	; 0x88
 7ba:	4654      	mov	r4, sl
 7bc:	5062      	str	r2, [r4, r1]
 7be:	22c4      	movs	r2, #196	; 0xc4
 7c0:	0052      	lsls	r2, r2, #1
 7c2:	4691      	mov	r9, r2
 7c4:	4481      	add	r9, r0
 7c6:	464a      	mov	r2, r9
 7c8:	3987      	subs	r1, #135	; 0x87
 7ca:	4099      	lsls	r1, r3
 7cc:	6812      	ldr	r2, [r2, #0]
 7ce:	468b      	mov	fp, r1
 7d0:	430a      	orrs	r2, r1
 7d2:	4694      	mov	ip, r2
 7d4:	464a      	mov	r2, r9
 7d6:	4661      	mov	r1, ip
 7d8:	6011      	str	r1, [r2, #0]
 7da:	2284      	movs	r2, #132	; 0x84
 7dc:	4641      	mov	r1, r8
 7de:	0052      	lsls	r2, r2, #1
 7e0:	50a1      	str	r1, [r4, r2]
 7e2:	2e02      	cmp	r6, #2
 7e4:	d1bb      	bne.n	75e <__register_exitproc+0x3a>
 7e6:	0002      	movs	r2, r0
 7e8:	465c      	mov	r4, fp
 7ea:	328d      	adds	r2, #141	; 0x8d
 7ec:	32ff      	adds	r2, #255	; 0xff
 7ee:	6811      	ldr	r1, [r2, #0]
 7f0:	430c      	orrs	r4, r1
 7f2:	6014      	str	r4, [r2, #0]
 7f4:	e7b3      	b.n	75e <__register_exitproc+0x3a>
 7f6:	0020      	movs	r0, r4
 7f8:	304d      	adds	r0, #77	; 0x4d
 7fa:	30ff      	adds	r0, #255	; 0xff
 7fc:	50e0      	str	r0, [r4, r3]
 7fe:	e7a7      	b.n	750 <__register_exitproc+0x2c>
 800:	6828      	ldr	r0, [r5, #0]
 802:	f7ff ff8d 	bl	720 <__retarget_lock_release_recursive>
 806:	2001      	movs	r0, #1
 808:	4240      	negs	r0, r0
 80a:	e7b1      	b.n	770 <__register_exitproc+0x4c>
 80c:	20000428 	.word	0x20000428
 810:	00000818 	.word	0x00000818
 814:	00000000 	.word	0x00000000

00000818 <_global_impure_ptr>:
 818:	20000000                                ... 

0000081c <_init>:
 81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81e:	46c0      	nop			; (mov r8, r8)
 820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 822:	bc08      	pop	{r3}
 824:	469e      	mov	lr, r3
 826:	4770      	bx	lr

00000828 <__init_array_start>:
 828:	000006c1 	.word	0x000006c1

0000082c <__frame_dummy_init_array_entry>:
 82c:	000000dd                                ....

00000830 <_fini>:
 830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 832:	46c0      	nop			; (mov r8, r8)
 834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 836:	bc08      	pop	{r3}
 838:	469e      	mov	lr, r3
 83a:	4770      	bx	lr

0000083c <__fini_array_start>:
 83c:	000000b5 	.word	0x000000b5
