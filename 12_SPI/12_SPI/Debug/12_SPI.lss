
12_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000938  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00000938  00000938  00010938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000042c  20000000  00000940  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000040  2000042c  00000d6c  0002042c  2**2
                  ALLOC
  4 .stack        00002004  2000046c  00000dac  0002042c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000bc19  00000000  00000000  000204ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008bc  00000000  00000000  0002c0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002c9  00000000  00000000  0002c982  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000000f8  00000000  00000000  0002cc4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0002cd43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001173a  00000000  00000000  0002cddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000244e  00000000  00000000  0003e515  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006f16b  00000000  00000000  00040963  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000374  00000000  00000000  000afad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	70 24 00 20 6d 03 00 00 69 03 00 00 69 03 00 00     p$. m...i...i...
	...
  2c:	69 03 00 00 00 00 00 00 00 00 00 00 69 03 00 00     i...........i...
  3c:	69 03 00 00 69 03 00 00 69 03 00 00 69 03 00 00     i...i...i...i...
  4c:	69 03 00 00 69 03 00 00 69 03 00 00 69 03 00 00     i...i...i...i...
  5c:	69 03 00 00 69 03 00 00 69 03 00 00 69 03 00 00     i...i...i...i...
  6c:	69 03 00 00 69 03 00 00 69 03 00 00 69 03 00 00     i...i...i...i...
  7c:	69 03 00 00 69 03 00 00 69 03 00 00 69 03 00 00     i...i...i...i...
  8c:	69 03 00 00 69 03 00 00 00 00 00 00 00 00 00 00     i...i...........
  9c:	69 03 00 00 69 03 00 00 69 03 00 00 69 03 00 00     i...i...i...i...
  ac:	69 03 00 00 00 00 00 00                             i.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	2000042c 	.word	0x2000042c
  d4:	00000000 	.word	0x00000000
  d8:	00000940 	.word	0x00000940

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000430 	.word	0x20000430
 108:	00000940 	.word	0x00000940
 10c:	00000940 	.word	0x00000940
 110:	00000000 	.word	0x00000000

00000114 <AppInit>:
 * Note:            This was taken from the _00_LED_ON provided by
 *                  Microchip Technology Inc. 
 *
 ******************************************************************************/
void AppInit(void)
{
 114:	b510      	push	{r4, lr}
	/*	Clock initialization (CPU, AHB, APBx, Asynchronous Peripheral Clocks)
		The System RC Oscillator (RCSYS) provides the source for the main clock
		at chip startup. It is set to 1MHz.
	*/
	ClocksInit();
 116:	4b04      	ldr	r3, [pc, #16]	; (128 <AppInit+0x14>)
 118:	4798      	blx	r3
	
	// Assign LED0 as OUTPUT
	REG_PORT_DIR0 = PORT_PA15;
 11a:	2380      	movs	r3, #128	; 0x80
 11c:	021b      	lsls	r3, r3, #8
 11e:	4a03      	ldr	r2, [pc, #12]	; (12c <AppInit+0x18>)
 120:	6013      	str	r3, [r2, #0]
	
	// Set LED0 OFF
	REG_PORT_OUTCLR0 = PORT_PA15;
 122:	4a03      	ldr	r2, [pc, #12]	; (130 <AppInit+0x1c>)
 124:	6013      	str	r3, [r2, #0]
	

} // AppInit()
 126:	bd10      	pop	{r4, pc}
 128:	00000251 	.word	0x00000251
 12c:	41004400 	.word	0x41004400
 130:	41004414 	.word	0x41004414

00000134 <spiSend>:


// Our SPI Send Function
uint8_t spiSend(uint8_t data)
{
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);
 134:	4a06      	ldr	r2, [pc, #24]	; (150 <spiSend+0x1c>)
 136:	7e13      	ldrb	r3, [r2, #24]
 138:	07db      	lsls	r3, r3, #31
 13a:	d5fc      	bpl.n	136 <spiSend+0x2>
	SERCOM1->SPI.DATA.reg = data;
 13c:	4b04      	ldr	r3, [pc, #16]	; (150 <spiSend+0x1c>)
 13e:	6298      	str	r0, [r3, #40]	; 0x28
	
	while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
 140:	001a      	movs	r2, r3
 142:	7e13      	ldrb	r3, [r2, #24]
 144:	075b      	lsls	r3, r3, #29
 146:	d5fc      	bpl.n	142 <spiSend+0xe>
	return (uint8_t)SERCOM1->SPI.DATA.reg;
 148:	4b01      	ldr	r3, [pc, #4]	; (150 <spiSend+0x1c>)
 14a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 14c:	b2c0      	uxtb	r0, r0
}
 14e:	4770      	bx	lr
 150:	42000c00 	.word	0x42000c00

00000154 <AppRun>:
 *
 * Note:
 *
 ******************************************************************************/
void AppRun(void)
{
 154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	  /* -------------------------------------------------
	  * 1) Enable bus clock to APBC mask
	  */
	  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;								
 156:	4a2b      	ldr	r2, [pc, #172]	; (204 <AppRun+0xb0>)
 158:	6a13      	ldr	r3, [r2, #32]
 15a:	2108      	movs	r1, #8
 15c:	430b      	orrs	r3, r1
 15e:	6213      	str	r3, [r2, #32]
	  
	  
	  /* -------------------------------------------------
	  * 2) select SPI clock
	  */
	  GCLK->CLKCTRL.reg = 
 160:	4a29      	ldr	r2, [pc, #164]	; (208 <AppRun+0xb4>)
 162:	4b2a      	ldr	r3, [pc, #168]	; (20c <AppRun+0xb8>)
 164:	805a      	strh	r2, [r3, #2]
	  
      /* -------------------------------------------------
	  * 3) setup pins
	  */ 
	  //Using the WRCONFIG register to bulk configure PA16 for being configured the SERCOM5 SPI MASTER MISO
	  PORT->Group[0].WRCONFIG.reg =
 166:	4b2a      	ldr	r3, [pc, #168]	; (210 <AppRun+0xbc>)
 168:	4a2a      	ldr	r2, [pc, #168]	; (214 <AppRun+0xc0>)
 16a:	629a      	str	r2, [r3, #40]	; 0x28
	       PORT_WRCONFIG_HWSEL |						 //Select the correct pin configurations for 16-31
	       PORT_WRCONFIG_INEN |									 //Enable input on this pin MISO
	       PORT_WRCONFIG_PINMASK((uint16_t)((PORT_PA18) >> 16)); //Selecting which pin is configured  PA17 
	       
	       //Using the WRCONFIG register to bulk configure both PB22 and PB23 for being configured the SERCOM5 SPI MASTER MOSI and SCK pins
	       PORT->Group[0].WRCONFIG.reg =
 16c:	4a2a      	ldr	r2, [pc, #168]	; (218 <AppRun+0xc4>)
 16e:	629a      	str	r2, [r3, #40]	; 0x28
	       PORT_WRCONFIG_PMUXEN |							 //Enables the PMUX for the pins
	       PORT_WRCONFIG_HWSEL |												//Select the correct pin configurations for 16-31
	       PORT_WRCONFIG_PINMASK ((uint16_t)((PORT_PA16 | PORT_PA19) >> 16));	//Selecting which pin is configured
	         
	       // Set the drive strength to strong
	       PORT->Group[0].PINCFG[19].bit.DRVSTR = 1;
 170:	314b      	adds	r1, #75	; 0x4b
 172:	5c5a      	ldrb	r2, [r3, r1]
 174:	2040      	movs	r0, #64	; 0x40
 176:	4302      	orrs	r2, r0
 178:	545a      	strb	r2, [r3, r1]

       /* -------------------------------------------------
	   * 4) Configure SPI Module
	   */ 
	   // Disable the SERCOM SPI module 
	   SERCOM5->SPI.CTRLA.bit.ENABLE = 0;
 17a:	4a28      	ldr	r2, [pc, #160]	; (21c <AppRun+0xc8>)
 17c:	6813      	ldr	r3, [r2, #0]
 17e:	3951      	subs	r1, #81	; 0x51
 180:	438b      	bics	r3, r1
 182:	6013      	str	r3, [r2, #0]

       // Wait for synchronization 
       while(SERCOM5->SPI.SYNCBUSY.bit.SWRST);
 184:	0013      	movs	r3, r2
 186:	69da      	ldr	r2, [r3, #28]
 188:	07d2      	lsls	r2, r2, #31
 18a:	d4fc      	bmi.n	186 <AppRun+0x32>

       // Perform a software reset 
       SERCOM5->SPI.CTRLA.bit.SWRST = 1;
 18c:	4a23      	ldr	r2, [pc, #140]	; (21c <AppRun+0xc8>)
 18e:	6813      	ldr	r3, [r2, #0]
 190:	2101      	movs	r1, #1
 192:	430b      	orrs	r3, r1
 194:	6013      	str	r3, [r2, #0]
		   
       // Wait for synchronization 
       while(SERCOM5->SPI.CTRLA.bit.SWRST);
 196:	0013      	movs	r3, r2
 198:	681a      	ldr	r2, [r3, #0]
 19a:	07d2      	lsls	r2, r2, #31
 19c:	d4fc      	bmi.n	198 <AppRun+0x44>

	   SERCOM1->SPI.CTRLA.reg = 
 19e:	4b20      	ldr	r3, [pc, #128]	; (220 <AppRun+0xcc>)
 1a0:	4a20      	ldr	r2, [pc, #128]	; (224 <AppRun+0xd0>)
 1a2:	601a      	str	r2, [r3, #0]
		  
	   /* -------------------------------------------------
	   * 5) Set the baud rate
	   */ 
	   uint32_t BAUD_REG =  ((float)48000000 / (float)(2 * 1000000)) - 1;	//Calculate BAUD value
	   SERCOM1->SPI.BAUD.reg =	SERCOM_SPI_BAUD_BAUD(BAUD_REG);
 1a4:	2217      	movs	r2, #23
 1a6:	731a      	strb	r2, [r3, #12]
		
	   /* -------------------------------------------------
	   * 6) Enable SPI Module
	   */ 
	    // enable SPI receive
	    SERCOM1->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_RXEN;      // Enable SPI Recieve enable
 1a8:	2280      	movs	r2, #128	; 0x80
 1aa:	0292      	lsls	r2, r2, #10
 1ac:	605a      	str	r2, [r3, #4]
	    SERCOM1->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;	//Enable the SPI
 1ae:	681a      	ldr	r2, [r3, #0]
 1b0:	2102      	movs	r1, #2
 1b2:	430a      	orrs	r2, r1
 1b4:	601a      	str	r2, [r3, #0]
	    while(SERCOM1->SPI.SYNCBUSY.bit.ENABLE);
 1b6:	69da      	ldr	r2, [r3, #28]
 1b8:	0792      	lsls	r2, r2, #30
 1ba:	d4fc      	bmi.n	1b6 <AppRun+0x62>
		   
	    // variable to hold our read data   
	    uint8_t Read_Data;
	   
	    // Initialize the UART at 9600 baud
	    UART3_Init(9600);
 1bc:	2096      	movs	r0, #150	; 0x96
 1be:	0180      	lsls	r0, r0, #6
 1c0:	4b19      	ldr	r3, [pc, #100]	; (228 <AppRun+0xd4>)
 1c2:	4798      	blx	r3
	    delay_ms(500);
 1c4:	4819      	ldr	r0, [pc, #100]	; (22c <AppRun+0xd8>)
 1c6:	4b1a      	ldr	r3, [pc, #104]	; (230 <AppRun+0xdc>)
 1c8:	4798      	blx	r3
	   while(1) 
	   {
		 for (char c = '0'; c <= '8'; c++) 
		 { 	
			// Send character via SPI Bus
			UART3_Write_Text("Sen: ");
 1ca:	4e1a      	ldr	r6, [pc, #104]	; (234 <AppRun+0xe0>)
			UART3_Write(c);
 1cc:	4f1a      	ldr	r7, [pc, #104]	; (238 <AppRun+0xe4>)
		 for (char c = '0'; c <= '8'; c++) 
 1ce:	2430      	movs	r4, #48	; 0x30
			UART3_Write_Text("Sen: ");
 1d0:	481a      	ldr	r0, [pc, #104]	; (23c <AppRun+0xe8>)
 1d2:	47b0      	blx	r6
			UART3_Write(c);
 1d4:	0020      	movs	r0, r4
 1d6:	47b8      	blx	r7
			UART3_Write_Text("\n");
 1d8:	4819      	ldr	r0, [pc, #100]	; (240 <AppRun+0xec>)
 1da:	47b0      	blx	r6
			Read_Data = spiSend(c);
 1dc:	0020      	movs	r0, r4
 1de:	4b19      	ldr	r3, [pc, #100]	; (244 <AppRun+0xf0>)
 1e0:	4798      	blx	r3
 1e2:	0005      	movs	r5, r0
			
			// Receive character via SPI Bus
			// and increment it
			UART3_Write_Text("Rec: ");
 1e4:	4818      	ldr	r0, [pc, #96]	; (248 <AppRun+0xf4>)
 1e6:	47b0      	blx	r6
			UART3_Write(Read_Data + 1);
 1e8:	3501      	adds	r5, #1
 1ea:	b2e8      	uxtb	r0, r5
 1ec:	47b8      	blx	r7
			UART3_Write_Text("\n");
 1ee:	4814      	ldr	r0, [pc, #80]	; (240 <AppRun+0xec>)
 1f0:	47b0      	blx	r6
			
			// Every Second
			delay_ms(1000);
 1f2:	4816      	ldr	r0, [pc, #88]	; (24c <AppRun+0xf8>)
 1f4:	4b0e      	ldr	r3, [pc, #56]	; (230 <AppRun+0xdc>)
 1f6:	4798      	blx	r3
		 for (char c = '0'; c <= '8'; c++) 
 1f8:	3401      	adds	r4, #1
 1fa:	b2e4      	uxtb	r4, r4
 1fc:	2c39      	cmp	r4, #57	; 0x39
 1fe:	d1e7      	bne.n	1d0 <AppRun+0x7c>
 200:	e7e5      	b.n	1ce <AppRun+0x7a>
 202:	46c0      	nop			; (mov r8, r8)
 204:	40000400 	.word	0x40000400
 208:	00004015 	.word	0x00004015
 20c:	40000c00 	.word	0x40000c00
 210:	41004400 	.word	0x41004400
 214:	d2030004 	.word	0xd2030004
 218:	d2010009 	.word	0xd2010009
 21c:	42001c00 	.word	0x42001c00
 220:	42000c00 	.word	0x42000c00
 224:	0023000c 	.word	0x0023000c
 228:	00000465 	.word	0x00000465
 22c:	003450dc 	.word	0x003450dc
 230:	0000035d 	.word	0x0000035d
 234:	00000525 	.word	0x00000525
 238:	0000050d 	.word	0x0000050d
 23c:	000008fc 	.word	0x000008fc
 240:	00000904 	.word	0x00000904
 244:	00000135 	.word	0x00000135
 248:	00000908 	.word	0x00000908
 24c:	0068a1b7 	.word	0x0068a1b7

00000250 <ClocksInit>:

	/* ----------------------------------------------------------------------------------------------
	* 1) Set Flash wait states for 48 MHz (per Table 37-40 in data sheet)
	*/
	
	NVMCTRL->CTRLB.bit.RWS = 1;		/* 1 wait state required @ 3.3V & 48MHz */
 250:	4a34      	ldr	r2, [pc, #208]	; (324 <ClocksInit+0xd4>)
 252:	6853      	ldr	r3, [r2, #4]
 254:	211e      	movs	r1, #30
 256:	438b      	bics	r3, r1
 258:	391c      	subs	r1, #28
 25a:	430b      	orrs	r3, r1
 25c:	6053      	str	r3, [r2, #4]
		.bit.AAMPEN = 0,		/* Disable automatic amplitude control */
		.bit.EN32K = 1,			/* 32kHz output is disabled */
		.bit.XTALEN = 1			/* Crystal connected to XIN32/XOUT32 */
	};
	// Write these settings
	SYSCTRL->XOSC32K.reg = sysctrl_xosc32k.reg;
 25e:	4b32      	ldr	r3, [pc, #200]	; (328 <ClocksInit+0xd8>)
 260:	2283      	movs	r2, #131	; 0x83
 262:	0092      	lsls	r2, r2, #2
 264:	829a      	strh	r2, [r3, #20]
	// Enable the Oscillator - Separate step per data sheet recommendation (sec 17.6.3)
	SYSCTRL->XOSC32K.bit.ENABLE = 1;
 266:	8a9a      	ldrh	r2, [r3, #20]
 268:	430a      	orrs	r2, r1
 26a:	829a      	strh	r2, [r3, #20]
	
	// Wait for XOSC32K to stabilize
	while(!SYSCTRL->PCLKSR.bit.XOSC32KRDY);
 26c:	001a      	movs	r2, r3
 26e:	68d3      	ldr	r3, [r2, #12]
 270:	079b      	lsls	r3, r3, #30
 272:	d5fc      	bpl.n	26e <ClocksInit+0x1e>
	{
		.bit.DIV = 1,								/* Set output division factor = 1 */
		.bit.ID = GENERIC_CLOCK_GENERATOR_XOSC32K	/* Apply division factor to Generator 1 */
	};
	// Write these settings
	GCLK->GENDIV.reg = gclk1_gendiv.reg;
 274:	4b2d      	ldr	r3, [pc, #180]	; (32c <ClocksInit+0xdc>)
 276:	2202      	movs	r2, #2
 278:	32ff      	adds	r2, #255	; 0xff
 27a:	609a      	str	r2, [r3, #8]
	
	// Configure Generic Clock Generator 1 with XOSC32K as source
	GCLK_GENCTRL_Type gclk1_genctrl = 
 27c:	4a2c      	ldr	r2, [pc, #176]	; (330 <ClocksInit+0xe0>)
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x05,		/* Generator source: XOSC32K output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_XOSC32K			/* Generator ID: 1 */
	};
	// Write these settings
	GCLK->GENCTRL.reg = gclk1_genctrl.reg;
 27e:	605a      	str	r2, [r3, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
 280:	001a      	movs	r2, r3
 282:	7853      	ldrb	r3, [r2, #1]
 284:	09db      	lsrs	r3, r3, #7
 286:	d1fc      	bne.n	282 <ClocksInit+0x32>
		.bit.CLKEN = 1,			/* Enable the Generic Clock */
		.bit.GEN = GENERIC_CLOCK_GENERATOR_XOSC32K, 	/* Generic Clock Generator 1 is the source */
		.bit.ID = 0x00			/* Generic Clock Multiplexer 0 (DFLL48M Reference) */
	};
	// Write these settings
	GCLK->CLKCTRL.reg = gclk_clkctrl.reg;
 288:	4b28      	ldr	r3, [pc, #160]	; (32c <ClocksInit+0xdc>)
 28a:	2282      	movs	r2, #130	; 0x82
 28c:	01d2      	lsls	r2, r2, #7
 28e:	805a      	strh	r2, [r3, #2]
	// Enable the DFLL48M in open loop mode. Without this step, attempts to go into closed loop mode at 48 MHz will
	// result in Processor Reset (you'll be at the in the Reset_Handler in startup_samd21.c).
	// PCLKSR.DFLLRDY must be one before writing to the DFLL Control register
	// Note that the DFLLRDY bit represents status of register synchronization - NOT clock stability
	// (see Data Sheet 17.6.14 Synchronization for detail)
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 290:	4a25      	ldr	r2, [pc, #148]	; (328 <ClocksInit+0xd8>)
 292:	68d3      	ldr	r3, [r2, #12]
 294:	06db      	lsls	r3, r3, #27
 296:	d5fc      	bpl.n	292 <ClocksInit+0x42>
	SYSCTRL->DFLLCTRL.reg = (uint16_t)(SYSCTRL_DFLLCTRL_ENABLE);
 298:	2202      	movs	r2, #2
 29a:	4b23      	ldr	r3, [pc, #140]	; (328 <ClocksInit+0xd8>)
 29c:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 29e:	001a      	movs	r2, r3
 2a0:	68d3      	ldr	r3, [r2, #12]
 2a2:	06db      	lsls	r3, r3, #27
 2a4:	d5fc      	bpl.n	2a0 <ClocksInit+0x50>
		.bit.CSTEP = 31,		/* Coarse step - use half of the max value (63) */
		.bit.FSTEP = 511,		/* Fine step - use half of the max value (1023) */
		.bit.MUL = 1465			/* Multiplier = MAIN_CLK_FREQ (48MHz) / EXT_32K_CLK_FREQ (32768 Hz) */
	};
	// Write these settings
	SYSCTRL->DFLLMUL.reg = sysctrl_dfllmul.reg;
 2a6:	4b20      	ldr	r3, [pc, #128]	; (328 <ClocksInit+0xd8>)
 2a8:	4a22      	ldr	r2, [pc, #136]	; (334 <ClocksInit+0xe4>)
 2aa:	62da      	str	r2, [r3, #44]	; 0x2c
	// Wait for synchronization
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 2ac:	001a      	movs	r2, r3
 2ae:	68d3      	ldr	r3, [r2, #12]
 2b0:	06db      	lsls	r3, r3, #27
 2b2:	d5fc      	bpl.n	2ae <ClocksInit+0x5e>
	
	// To reduce lock time, load factory calibrated values into DFLLVAL (cf. Data Sheet 17.6.7.1)
	// Location of value is defined in Data Sheet Table 10-5. NVM Software Calibration Area Mapping
	
	// Get factory calibrated value for "DFLL48M COARSE CAL" from NVM Software Calibration Area
	tempDFLL48CalibrationCoarse = *(uint32_t*)FUSES_DFLL48M_COARSE_CAL_ADDR;
 2b4:	4b20      	ldr	r3, [pc, #128]	; (338 <ClocksInit+0xe8>)
	tempDFLL48CalibrationCoarse &= FUSES_DFLL48M_COARSE_CAL_Msk;
	tempDFLL48CalibrationCoarse = tempDFLL48CalibrationCoarse>>FUSES_DFLL48M_COARSE_CAL_Pos;
	// Write the coarse calibration value
	SYSCTRL->DFLLVAL.bit.COARSE = tempDFLL48CalibrationCoarse;
 2b6:	681a      	ldr	r2, [r3, #0]
 2b8:	491b      	ldr	r1, [pc, #108]	; (328 <ClocksInit+0xd8>)
 2ba:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 2bc:	0e92      	lsrs	r2, r2, #26
 2be:	0292      	lsls	r2, r2, #10
 2c0:	481e      	ldr	r0, [pc, #120]	; (33c <ClocksInit+0xec>)
 2c2:	4003      	ands	r3, r0
 2c4:	4313      	orrs	r3, r2
 2c6:	628b      	str	r3, [r1, #40]	; 0x28
	// Switch DFLL48M to Closed Loop mode and enable WAITLOCK
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 2c8:	000a      	movs	r2, r1
 2ca:	68d3      	ldr	r3, [r2, #12]
 2cc:	06db      	lsls	r3, r3, #27
 2ce:	d5fc      	bpl.n	2ca <ClocksInit+0x7a>
	SYSCTRL->DFLLCTRL.reg |= (uint16_t) (SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_WAITLOCK);
 2d0:	4a15      	ldr	r2, [pc, #84]	; (328 <ClocksInit+0xd8>)
 2d2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 2d4:	491a      	ldr	r1, [pc, #104]	; (340 <ClocksInit+0xf0>)
 2d6:	430b      	orrs	r3, r1
 2d8:	8493      	strh	r3, [r2, #36]	; 0x24
		.bit.IDC = 1,			/* Generator duty cycle is 50/50 */
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x07,		/* Generator source: DFLL48M output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_MAIN			/* Generator ID: 0 */
	};
	GCLK->GENCTRL.reg = gclk_genctrl0.reg;
 2da:	4b14      	ldr	r3, [pc, #80]	; (32c <ClocksInit+0xdc>)
 2dc:	4a19      	ldr	r2, [pc, #100]	; (344 <ClocksInit+0xf4>)
 2de:	605a      	str	r2, [r3, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
 2e0:	001a      	movs	r2, r3
 2e2:	7853      	ldrb	r3, [r2, #1]
 2e4:	09db      	lsrs	r3, r3, #7
 2e6:	d1fc      	bne.n	2e2 <ClocksInit+0x92>
		.bit.PMUX = 7,			/* Peripheral Function H selected (GCLK_IO[0]) */
		.bit.PMUXEN = 1,		/* Enable peripheral Multiplexer */
		.bit.PINMASK = (uint16_t)(1 << (28-16)) /* Select the pin(s) to be configured */
	};
	// Write these settings
	PORT->Group[0].WRCONFIG.reg = port0_wrconfig.reg;
 2e8:	4b17      	ldr	r3, [pc, #92]	; (348 <ClocksInit+0xf8>)
 2ea:	4a18      	ldr	r2, [pc, #96]	; (34c <ClocksInit+0xfc>)
 2ec:	629a      	str	r2, [r3, #40]	; 0x28
	
	/* ----------------------------------------------------------------------------------------------
	* 7) Modify prescaler value of OSC8M to produce 8MHz output
	*/

	SYSCTRL->OSC8M.bit.PRESC = 0;		/* Prescale by 1 */
 2ee:	4b0e      	ldr	r3, [pc, #56]	; (328 <ClocksInit+0xd8>)
 2f0:	6a1a      	ldr	r2, [r3, #32]
 2f2:	4917      	ldr	r1, [pc, #92]	; (350 <ClocksInit+0x100>)
 2f4:	400a      	ands	r2, r1
 2f6:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;	/* Oscillator is always on if enabled */
 2f8:	6a1a      	ldr	r2, [r3, #32]
 2fa:	2180      	movs	r1, #128	; 0x80
 2fc:	438a      	bics	r2, r1
 2fe:	621a      	str	r2, [r3, #32]
	{
		.bit.DIV = 1,								/* Set output division factor = 1 */
		.bit.ID = GENERIC_CLOCK_GENERATOR_OSC8M		/* Apply division factor to Generator 3 */
	};
	// Write these settings
	GCLK->GENDIV.reg = gclk3_gendiv.reg;
 300:	4b0a      	ldr	r3, [pc, #40]	; (32c <ClocksInit+0xdc>)
 302:	2204      	movs	r2, #4
 304:	32ff      	adds	r2, #255	; 0xff
 306:	609a      	str	r2, [r3, #8]
	
	// Configure Generic Clock Generator 3 with OSC8M as source
	GCLK_GENCTRL_Type gclk3_genctrl = 
 308:	4a12      	ldr	r2, [pc, #72]	; (354 <ClocksInit+0x104>)
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x06,		/* Generator source: OSC8M output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_OSC8M			/* Generator ID: 3 */
	};
	// Write these settings
	GCLK->GENCTRL.reg = gclk3_genctrl.reg;
 30a:	605a      	str	r2, [r3, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
 30c:	001a      	movs	r2, r3
 30e:	7853      	ldrb	r3, [r2, #1]
 310:	09db      	lsrs	r3, r3, #7
 312:	d1fc      	bne.n	30e <ClocksInit+0xbe>
	
	/* ----------------------------------------------------------------------------------------------
	* 9) Set CPU and APBx BUS Clocks to 48MHz
	*/
	PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
 314:	4b10      	ldr	r3, [pc, #64]	; (358 <ClocksInit+0x108>)
 316:	2200      	movs	r2, #0
 318:	721a      	strb	r2, [r3, #8]
	PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
 31a:	725a      	strb	r2, [r3, #9]
	PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
 31c:	729a      	strb	r2, [r3, #10]
	PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
 31e:	72da      	strb	r2, [r3, #11]
	
 320:	4770      	bx	lr
 322:	46c0      	nop			; (mov r8, r8)
 324:	41004000 	.word	0x41004000
 328:	40000800 	.word	0x40000800
 32c:	40000c00 	.word	0x40000c00
 330:	00030501 	.word	0x00030501
 334:	7dff05b9 	.word	0x7dff05b9
 338:	00806024 	.word	0x00806024
 33c:	ffff03ff 	.word	0xffff03ff
 340:	00000804 	.word	0x00000804
 344:	000b0700 	.word	0x000b0700
 348:	41004400 	.word	0x41004400
 34c:	d7011000 	.word	0xd7011000
 350:	fffffcff 	.word	0xfffffcff
 354:	00030603 	.word	0x00030603
 358:	40000400 	.word	0x40000400

0000035c <delay_n_cycles>:
 *
 ******************************************************************************/

void delay_n_cycles(unsigned long n)
{
	__asm (
 35c:	f3bf 8f5f 	dmb	sy
 360:	3801      	subs	r0, #1
 362:	2800      	cmp	r0, #0
 364:	d1fa      	bne.n	35c <delay_n_cycles>
	"loop: DMB	\n"
	"SUB r0, r0, #1 \n"
	"CMP r0, #0  \n"
	"BNE loop         "
	);
} // delay_n_cycles()
 366:	4770      	bx	lr

00000368 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 368:	e7fe      	b.n	368 <Dummy_Handler>
	...

0000036c <Reset_Handler>:
{
 36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 36e:	4a2a      	ldr	r2, [pc, #168]	; (418 <Reset_Handler+0xac>)
 370:	4b2a      	ldr	r3, [pc, #168]	; (41c <Reset_Handler+0xb0>)
 372:	429a      	cmp	r2, r3
 374:	d011      	beq.n	39a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 376:	001a      	movs	r2, r3
 378:	4b29      	ldr	r3, [pc, #164]	; (420 <Reset_Handler+0xb4>)
 37a:	429a      	cmp	r2, r3
 37c:	d20d      	bcs.n	39a <Reset_Handler+0x2e>
 37e:	4a29      	ldr	r2, [pc, #164]	; (424 <Reset_Handler+0xb8>)
 380:	3303      	adds	r3, #3
 382:	1a9b      	subs	r3, r3, r2
 384:	089b      	lsrs	r3, r3, #2
 386:	3301      	adds	r3, #1
 388:	009b      	lsls	r3, r3, #2
 38a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 38c:	4823      	ldr	r0, [pc, #140]	; (41c <Reset_Handler+0xb0>)
 38e:	4922      	ldr	r1, [pc, #136]	; (418 <Reset_Handler+0xac>)
 390:	588c      	ldr	r4, [r1, r2]
 392:	5084      	str	r4, [r0, r2]
 394:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 396:	429a      	cmp	r2, r3
 398:	d1fa      	bne.n	390 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 39a:	4a23      	ldr	r2, [pc, #140]	; (428 <Reset_Handler+0xbc>)
 39c:	4b23      	ldr	r3, [pc, #140]	; (42c <Reset_Handler+0xc0>)
 39e:	429a      	cmp	r2, r3
 3a0:	d20a      	bcs.n	3b8 <Reset_Handler+0x4c>
 3a2:	43d3      	mvns	r3, r2
 3a4:	4921      	ldr	r1, [pc, #132]	; (42c <Reset_Handler+0xc0>)
 3a6:	185b      	adds	r3, r3, r1
 3a8:	2103      	movs	r1, #3
 3aa:	438b      	bics	r3, r1
 3ac:	3304      	adds	r3, #4
 3ae:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 3b0:	2100      	movs	r1, #0
 3b2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 3b4:	4293      	cmp	r3, r2
 3b6:	d1fc      	bne.n	3b2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 3b8:	4a1d      	ldr	r2, [pc, #116]	; (430 <Reset_Handler+0xc4>)
 3ba:	21ff      	movs	r1, #255	; 0xff
 3bc:	4b1d      	ldr	r3, [pc, #116]	; (434 <Reset_Handler+0xc8>)
 3be:	438b      	bics	r3, r1
 3c0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 3c2:	39fd      	subs	r1, #253	; 0xfd
 3c4:	2390      	movs	r3, #144	; 0x90
 3c6:	005b      	lsls	r3, r3, #1
 3c8:	4a1b      	ldr	r2, [pc, #108]	; (438 <Reset_Handler+0xcc>)
 3ca:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 3cc:	4a1b      	ldr	r2, [pc, #108]	; (43c <Reset_Handler+0xd0>)
 3ce:	78d3      	ldrb	r3, [r2, #3]
 3d0:	2503      	movs	r5, #3
 3d2:	43ab      	bics	r3, r5
 3d4:	2402      	movs	r4, #2
 3d6:	4323      	orrs	r3, r4
 3d8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 3da:	78d3      	ldrb	r3, [r2, #3]
 3dc:	270c      	movs	r7, #12
 3de:	43bb      	bics	r3, r7
 3e0:	2608      	movs	r6, #8
 3e2:	4333      	orrs	r3, r6
 3e4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 3e6:	4b16      	ldr	r3, [pc, #88]	; (440 <Reset_Handler+0xd4>)
 3e8:	7b98      	ldrb	r0, [r3, #14]
 3ea:	2230      	movs	r2, #48	; 0x30
 3ec:	4390      	bics	r0, r2
 3ee:	2220      	movs	r2, #32
 3f0:	4310      	orrs	r0, r2
 3f2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 3f4:	7b99      	ldrb	r1, [r3, #14]
 3f6:	43b9      	bics	r1, r7
 3f8:	4331      	orrs	r1, r6
 3fa:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 3fc:	7b9a      	ldrb	r2, [r3, #14]
 3fe:	43aa      	bics	r2, r5
 400:	4322      	orrs	r2, r4
 402:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 404:	4a0f      	ldr	r2, [pc, #60]	; (444 <Reset_Handler+0xd8>)
 406:	6853      	ldr	r3, [r2, #4]
 408:	2180      	movs	r1, #128	; 0x80
 40a:	430b      	orrs	r3, r1
 40c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 40e:	4b0e      	ldr	r3, [pc, #56]	; (448 <Reset_Handler+0xdc>)
 410:	4798      	blx	r3
        main();
 412:	4b0e      	ldr	r3, [pc, #56]	; (44c <Reset_Handler+0xe0>)
 414:	4798      	blx	r3
 416:	e7fe      	b.n	416 <Reset_Handler+0xaa>
 418:	00000940 	.word	0x00000940
 41c:	20000000 	.word	0x20000000
 420:	2000042c 	.word	0x2000042c
 424:	20000004 	.word	0x20000004
 428:	2000042c 	.word	0x2000042c
 42c:	2000046c 	.word	0x2000046c
 430:	e000ed00 	.word	0xe000ed00
 434:	00000000 	.word	0x00000000
 438:	41007000 	.word	0x41007000
 43c:	41005000 	.word	0x41005000
 440:	41004800 	.word	0x41004800
 444:	41004000 	.word	0x41004000
 448:	0000075d 	.word	0x0000075d
 44c:	00000451 	.word	0x00000451

00000450 <main>:
 *
 * Note:
 *
 ******************************************************************************/
int main(void)
{
 450:	b510      	push	{r4, lr}
	// CMSIS compliant function not used
	//SystemInit();
	
	// Application hardware and software initialization 
	AppInit();
 452:	4b02      	ldr	r3, [pc, #8]	; (45c <main+0xc>)
 454:	4798      	blx	r3

	// Super loop
	while(1)
	{
		// Run your application
		AppRun();
 456:	4c02      	ldr	r4, [pc, #8]	; (460 <main+0x10>)
 458:	47a0      	blx	r4
 45a:	e7fd      	b.n	458 <main+0x8>
 45c:	00000115 	.word	0x00000115
 460:	00000155 	.word	0x00000155

00000464 <UART3_Init>:
 *
 * Note:            
 *
 ******************************************************************************/
void UART3_Init(uint32_t baud)
{
 464:	b570      	push	{r4, r5, r6, lr}
	
	/* -------------------------------------------------
	* 1) Enable bus clock to APBC mask
	*/
	REG_PM_APBCMASK |=  PM_APBCMASK_SERCOM3;
 466:	4a21      	ldr	r2, [pc, #132]	; (4ec <UART3_Init+0x88>)
 468:	6813      	ldr	r3, [r2, #0]
 46a:	2120      	movs	r1, #32
 46c:	430b      	orrs	r3, r1
 46e:	6013      	str	r3, [r2, #0]
	
    /* -------------------------------------------------
	* 2) select UART clock
	*/
	GCLK->CLKCTRL.reg =  
 470:	4a1f      	ldr	r2, [pc, #124]	; (4f0 <UART3_Init+0x8c>)
 472:	4b20      	ldr	r3, [pc, #128]	; (4f4 <UART3_Init+0x90>)
 474:	805a      	strh	r2, [r3, #2]
	
	/* --------------------------------------------------
	* 3) Configure PA22 as TX Pin
	*/
	// Set pin direction to output
	PORT->Group[0].DIRSET.reg = (1 << 22);     
 476:	4b20      	ldr	r3, [pc, #128]	; (4f8 <UART3_Init+0x94>)
 478:	2280      	movs	r2, #128	; 0x80
 47a:	03d2      	lsls	r2, r2, #15
 47c:	609a      	str	r2, [r3, #8]
	
    // Enable PMUX
	PORT->Group[0].PINCFG[22].reg |= PORT_PINCFG_PMUXEN;   
 47e:	2256      	movs	r2, #86	; 0x56
 480:	5c99      	ldrb	r1, [r3, r2]
 482:	2601      	movs	r6, #1
 484:	4331      	orrs	r1, r6
 486:	b2c9      	uxtb	r1, r1
 488:	5499      	strb	r1, [r3, r2]
	
	// Enable PMUX and set the PMUX bit, since pin is even we use PMUXE
	PORT->Group[0].PMUX[22>>1].bit.PMUXE = PORT_PMUX_PMUXE_C_Val;
 48a:	243b      	movs	r4, #59	; 0x3b
 48c:	5d19      	ldrb	r1, [r3, r4]
 48e:	3a47      	subs	r2, #71	; 0x47
 490:	4391      	bics	r1, r2
 492:	2202      	movs	r2, #2
 494:	4311      	orrs	r1, r2
 496:	5519      	strb	r1, [r3, r4]
	
	/* ---------------------------------------------------
	* 4) Configure PA23 as RX Pin
	*/
	// Set pin direction to input
	PORT->Group[0].DIRCLR.reg = (1 << 23);       
 498:	2280      	movs	r2, #128	; 0x80
 49a:	0412      	lsls	r2, r2, #16
 49c:	605a      	str	r2, [r3, #4]

	// Enable pull down resistor
	PORT->Group[0].PINCFG[23].reg &= ~PORT_PINCFG_PULLEN;   
 49e:	2157      	movs	r1, #87	; 0x57
 4a0:	5c5d      	ldrb	r5, [r3, r1]
 4a2:	2204      	movs	r2, #4
 4a4:	4395      	bics	r5, r2
 4a6:	545d      	strb	r5, [r3, r1]
	
	// Enable PMUX and set the PMUX bit, since pin is odd we use PMUX0
	PORT->Group[0].PINCFG[23].reg |= PORT_PINCFG_PMUXEN; 
 4a8:	5c5a      	ldrb	r2, [r3, r1]
 4aa:	4332      	orrs	r2, r6
 4ac:	b2d2      	uxtb	r2, r2
 4ae:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[23>>1].bit.PMUXO = PORT_PMUX_PMUXO_C_Val; 
 4b0:	5d19      	ldrb	r1, [r3, r4]
 4b2:	220f      	movs	r2, #15
 4b4:	400a      	ands	r2, r1
 4b6:	2120      	movs	r1, #32
 4b8:	430a      	orrs	r2, r1
 4ba:	551a      	strb	r2, [r3, r4]
	
	
	/* ----------------------------------------------------
	* 5) Configure USART via Control A and Control B 
	*/
	SERCOM3->USART.CTRLA.reg =                  // USART is ASYNCHRONOUS
 4bc:	4c0f      	ldr	r4, [pc, #60]	; (4fc <UART3_Init+0x98>)
 4be:	4b10      	ldr	r3, [pc, #64]	; (500 <UART3_Init+0x9c>)
 4c0:	6023      	str	r3, [r4, #0]
	   SERCOM_USART_CTRLA_MODE_USART_INT_CLK |  // Set Internal Clock 
	   SERCOM_USART_CTRLA_RXPO(1) |             // Use SERCOM pad 1 for data reception
	   SERCOM_USART_CTRLA_TXPO(0/*PAD0*/);      // Set SERCOM pad 0 for data transmission
	
	
	SERCOM3->USART.CTRLB.reg =        // We don't use PARITY
 4c2:	23c0      	movs	r3, #192	; 0xc0
 4c4:	029b      	lsls	r3, r3, #10
 4c6:	6063      	str	r3, [r4, #4]
	
	/* -----------------------------------------------------
	* 6) Set USART Baud Rate
	*/
	// Baud rate is (65536) * (CPU_CLock - 16 * wanted baud) / CPU_Clock
	uint64_t baudRate = (uint64_t)65536 * (F_CPU - 16 * baud) / F_CPU;
 4c8:	0100      	lsls	r0, r0, #4
 4ca:	4240      	negs	r0, r0
 4cc:	4b0d      	ldr	r3, [pc, #52]	; (504 <UART3_Init+0xa0>)
 4ce:	469c      	mov	ip, r3
 4d0:	4460      	add	r0, ip
 4d2:	0c01      	lsrs	r1, r0, #16
 4d4:	0400      	lsls	r0, r0, #16
 4d6:	4a0b      	ldr	r2, [pc, #44]	; (504 <UART3_Init+0xa0>)
 4d8:	2300      	movs	r3, #0
 4da:	4d0b      	ldr	r5, [pc, #44]	; (508 <UART3_Init+0xa4>)
 4dc:	47a8      	blx	r5
	
	// Set Baud Rate
	SERCOM3->USART.BAUD.reg = (uint32_t)baudRate;
 4de:	b280      	uxth	r0, r0
 4e0:	81a0      	strh	r0, [r4, #12]

    /* ------------------------------------------------------
	* 7) Enable the USART
	*/
	// SERCOM3 peripheral enabled
	SERCOM3->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 4e2:	6823      	ldr	r3, [r4, #0]
 4e4:	2202      	movs	r2, #2
 4e6:	4313      	orrs	r3, r2
 4e8:	6023      	str	r3, [r4, #0]
}  // UART3_Init()
 4ea:	bd70      	pop	{r4, r5, r6, pc}
 4ec:	40000420 	.word	0x40000420
 4f0:	00004017 	.word	0x00004017
 4f4:	40000c00 	.word	0x40000c00
 4f8:	41004400 	.word	0x41004400
 4fc:	42001400 	.word	0x42001400
 500:	40100004 	.word	0x40100004
 504:	02dc6c00 	.word	0x02dc6c00
 508:	00000545 	.word	0x00000545

0000050c <UART3_Write>:
 *
 ******************************************************************************/
void UART3_Write(char data)
{
	// Wait on interrupt flag and Write some data
	while(!(REG_SERCOM3_USART_INTFLAG) & 1)
 50c:	4a03      	ldr	r2, [pc, #12]	; (51c <UART3_Write+0x10>)
 50e:	7813      	ldrb	r3, [r2, #0]
 510:	2b00      	cmp	r3, #0
 512:	d0fc      	beq.n	50e <UART3_Write+0x2>
	{
		
	}
	
	REG_SERCOM3_USART_DATA = data;
 514:	b280      	uxth	r0, r0
 516:	4b02      	ldr	r3, [pc, #8]	; (520 <UART3_Write+0x14>)
 518:	8018      	strh	r0, [r3, #0]
} //UART3_Write()
 51a:	4770      	bx	lr
 51c:	42001418 	.word	0x42001418
 520:	42001428 	.word	0x42001428

00000524 <UART3_Write_Text>:
 *
 * Note:            
 *
 ******************************************************************************/
void UART3_Write_Text(char *text)
{
 524:	b570      	push	{r4, r5, r6, lr}
 526:	0004      	movs	r4, r0
	// we write text until we reach EOL
	for(int i=0;text[i]!='\0';i++)
 528:	7800      	ldrb	r0, [r0, #0]
 52a:	2800      	cmp	r0, #0
 52c:	d007      	beq.n	53e <UART3_Write_Text+0x1a>
 52e:	3401      	adds	r4, #1
	{
		UART3_Write(text[i]);
 530:	4d03      	ldr	r5, [pc, #12]	; (540 <UART3_Write_Text+0x1c>)
 532:	47a8      	blx	r5
 534:	3401      	adds	r4, #1
	for(int i=0;text[i]!='\0';i++)
 536:	1e63      	subs	r3, r4, #1
 538:	7818      	ldrb	r0, [r3, #0]
 53a:	2800      	cmp	r0, #0
 53c:	d1f9      	bne.n	532 <UART3_Write_Text+0xe>
	}
	
} // UART3_Write_Text()
 53e:	bd70      	pop	{r4, r5, r6, pc}
 540:	0000050d 	.word	0x0000050d

00000544 <__aeabi_uldivmod>:
 544:	2b00      	cmp	r3, #0
 546:	d111      	bne.n	56c <__aeabi_uldivmod+0x28>
 548:	2a00      	cmp	r2, #0
 54a:	d10f      	bne.n	56c <__aeabi_uldivmod+0x28>
 54c:	2900      	cmp	r1, #0
 54e:	d100      	bne.n	552 <__aeabi_uldivmod+0xe>
 550:	2800      	cmp	r0, #0
 552:	d002      	beq.n	55a <__aeabi_uldivmod+0x16>
 554:	2100      	movs	r1, #0
 556:	43c9      	mvns	r1, r1
 558:	1c08      	adds	r0, r1, #0
 55a:	b407      	push	{r0, r1, r2}
 55c:	4802      	ldr	r0, [pc, #8]	; (568 <__aeabi_uldivmod+0x24>)
 55e:	a102      	add	r1, pc, #8	; (adr r1, 568 <__aeabi_uldivmod+0x24>)
 560:	1840      	adds	r0, r0, r1
 562:	9002      	str	r0, [sp, #8]
 564:	bd03      	pop	{r0, r1, pc}
 566:	46c0      	nop			; (mov r8, r8)
 568:	0000019d 	.word	0x0000019d
 56c:	b403      	push	{r0, r1}
 56e:	4668      	mov	r0, sp
 570:	b501      	push	{r0, lr}
 572:	9802      	ldr	r0, [sp, #8]
 574:	f000 f806 	bl	584 <__udivmoddi4>
 578:	9b01      	ldr	r3, [sp, #4]
 57a:	469e      	mov	lr, r3
 57c:	b002      	add	sp, #8
 57e:	bc0c      	pop	{r2, r3}
 580:	4770      	bx	lr
 582:	46c0      	nop			; (mov r8, r8)

00000584 <__udivmoddi4>:
 584:	b5f0      	push	{r4, r5, r6, r7, lr}
 586:	4657      	mov	r7, sl
 588:	464e      	mov	r6, r9
 58a:	4645      	mov	r5, r8
 58c:	46de      	mov	lr, fp
 58e:	b5e0      	push	{r5, r6, r7, lr}
 590:	0004      	movs	r4, r0
 592:	b083      	sub	sp, #12
 594:	000d      	movs	r5, r1
 596:	4692      	mov	sl, r2
 598:	4699      	mov	r9, r3
 59a:	428b      	cmp	r3, r1
 59c:	d82f      	bhi.n	5fe <__udivmoddi4+0x7a>
 59e:	d02c      	beq.n	5fa <__udivmoddi4+0x76>
 5a0:	4649      	mov	r1, r9
 5a2:	4650      	mov	r0, sl
 5a4:	f000 f8b0 	bl	708 <__clzdi2>
 5a8:	0029      	movs	r1, r5
 5aa:	0006      	movs	r6, r0
 5ac:	0020      	movs	r0, r4
 5ae:	f000 f8ab 	bl	708 <__clzdi2>
 5b2:	1a33      	subs	r3, r6, r0
 5b4:	4698      	mov	r8, r3
 5b6:	3b20      	subs	r3, #32
 5b8:	469b      	mov	fp, r3
 5ba:	d500      	bpl.n	5be <__udivmoddi4+0x3a>
 5bc:	e074      	b.n	6a8 <__udivmoddi4+0x124>
 5be:	4653      	mov	r3, sl
 5c0:	465a      	mov	r2, fp
 5c2:	4093      	lsls	r3, r2
 5c4:	001f      	movs	r7, r3
 5c6:	4653      	mov	r3, sl
 5c8:	4642      	mov	r2, r8
 5ca:	4093      	lsls	r3, r2
 5cc:	001e      	movs	r6, r3
 5ce:	42af      	cmp	r7, r5
 5d0:	d829      	bhi.n	626 <__udivmoddi4+0xa2>
 5d2:	d026      	beq.n	622 <__udivmoddi4+0x9e>
 5d4:	465b      	mov	r3, fp
 5d6:	1ba4      	subs	r4, r4, r6
 5d8:	41bd      	sbcs	r5, r7
 5da:	2b00      	cmp	r3, #0
 5dc:	da00      	bge.n	5e0 <__udivmoddi4+0x5c>
 5de:	e079      	b.n	6d4 <__udivmoddi4+0x150>
 5e0:	2200      	movs	r2, #0
 5e2:	2300      	movs	r3, #0
 5e4:	9200      	str	r2, [sp, #0]
 5e6:	9301      	str	r3, [sp, #4]
 5e8:	2301      	movs	r3, #1
 5ea:	465a      	mov	r2, fp
 5ec:	4093      	lsls	r3, r2
 5ee:	9301      	str	r3, [sp, #4]
 5f0:	2301      	movs	r3, #1
 5f2:	4642      	mov	r2, r8
 5f4:	4093      	lsls	r3, r2
 5f6:	9300      	str	r3, [sp, #0]
 5f8:	e019      	b.n	62e <__udivmoddi4+0xaa>
 5fa:	4282      	cmp	r2, r0
 5fc:	d9d0      	bls.n	5a0 <__udivmoddi4+0x1c>
 5fe:	2200      	movs	r2, #0
 600:	2300      	movs	r3, #0
 602:	9200      	str	r2, [sp, #0]
 604:	9301      	str	r3, [sp, #4]
 606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 608:	2b00      	cmp	r3, #0
 60a:	d001      	beq.n	610 <__udivmoddi4+0x8c>
 60c:	601c      	str	r4, [r3, #0]
 60e:	605d      	str	r5, [r3, #4]
 610:	9800      	ldr	r0, [sp, #0]
 612:	9901      	ldr	r1, [sp, #4]
 614:	b003      	add	sp, #12
 616:	bc3c      	pop	{r2, r3, r4, r5}
 618:	4690      	mov	r8, r2
 61a:	4699      	mov	r9, r3
 61c:	46a2      	mov	sl, r4
 61e:	46ab      	mov	fp, r5
 620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 622:	42a3      	cmp	r3, r4
 624:	d9d6      	bls.n	5d4 <__udivmoddi4+0x50>
 626:	2200      	movs	r2, #0
 628:	2300      	movs	r3, #0
 62a:	9200      	str	r2, [sp, #0]
 62c:	9301      	str	r3, [sp, #4]
 62e:	4643      	mov	r3, r8
 630:	2b00      	cmp	r3, #0
 632:	d0e8      	beq.n	606 <__udivmoddi4+0x82>
 634:	07fb      	lsls	r3, r7, #31
 636:	0872      	lsrs	r2, r6, #1
 638:	431a      	orrs	r2, r3
 63a:	4646      	mov	r6, r8
 63c:	087b      	lsrs	r3, r7, #1
 63e:	e00e      	b.n	65e <__udivmoddi4+0xda>
 640:	42ab      	cmp	r3, r5
 642:	d101      	bne.n	648 <__udivmoddi4+0xc4>
 644:	42a2      	cmp	r2, r4
 646:	d80c      	bhi.n	662 <__udivmoddi4+0xde>
 648:	1aa4      	subs	r4, r4, r2
 64a:	419d      	sbcs	r5, r3
 64c:	2001      	movs	r0, #1
 64e:	1924      	adds	r4, r4, r4
 650:	416d      	adcs	r5, r5
 652:	2100      	movs	r1, #0
 654:	3e01      	subs	r6, #1
 656:	1824      	adds	r4, r4, r0
 658:	414d      	adcs	r5, r1
 65a:	2e00      	cmp	r6, #0
 65c:	d006      	beq.n	66c <__udivmoddi4+0xe8>
 65e:	42ab      	cmp	r3, r5
 660:	d9ee      	bls.n	640 <__udivmoddi4+0xbc>
 662:	3e01      	subs	r6, #1
 664:	1924      	adds	r4, r4, r4
 666:	416d      	adcs	r5, r5
 668:	2e00      	cmp	r6, #0
 66a:	d1f8      	bne.n	65e <__udivmoddi4+0xda>
 66c:	465b      	mov	r3, fp
 66e:	9800      	ldr	r0, [sp, #0]
 670:	9901      	ldr	r1, [sp, #4]
 672:	1900      	adds	r0, r0, r4
 674:	4169      	adcs	r1, r5
 676:	2b00      	cmp	r3, #0
 678:	db22      	blt.n	6c0 <__udivmoddi4+0x13c>
 67a:	002b      	movs	r3, r5
 67c:	465a      	mov	r2, fp
 67e:	40d3      	lsrs	r3, r2
 680:	002a      	movs	r2, r5
 682:	4644      	mov	r4, r8
 684:	40e2      	lsrs	r2, r4
 686:	001c      	movs	r4, r3
 688:	465b      	mov	r3, fp
 68a:	0015      	movs	r5, r2
 68c:	2b00      	cmp	r3, #0
 68e:	db2c      	blt.n	6ea <__udivmoddi4+0x166>
 690:	0026      	movs	r6, r4
 692:	409e      	lsls	r6, r3
 694:	0033      	movs	r3, r6
 696:	0026      	movs	r6, r4
 698:	4647      	mov	r7, r8
 69a:	40be      	lsls	r6, r7
 69c:	0032      	movs	r2, r6
 69e:	1a80      	subs	r0, r0, r2
 6a0:	4199      	sbcs	r1, r3
 6a2:	9000      	str	r0, [sp, #0]
 6a4:	9101      	str	r1, [sp, #4]
 6a6:	e7ae      	b.n	606 <__udivmoddi4+0x82>
 6a8:	4642      	mov	r2, r8
 6aa:	2320      	movs	r3, #32
 6ac:	1a9b      	subs	r3, r3, r2
 6ae:	4652      	mov	r2, sl
 6b0:	40da      	lsrs	r2, r3
 6b2:	4641      	mov	r1, r8
 6b4:	0013      	movs	r3, r2
 6b6:	464a      	mov	r2, r9
 6b8:	408a      	lsls	r2, r1
 6ba:	0017      	movs	r7, r2
 6bc:	431f      	orrs	r7, r3
 6be:	e782      	b.n	5c6 <__udivmoddi4+0x42>
 6c0:	4642      	mov	r2, r8
 6c2:	2320      	movs	r3, #32
 6c4:	1a9b      	subs	r3, r3, r2
 6c6:	002a      	movs	r2, r5
 6c8:	4646      	mov	r6, r8
 6ca:	409a      	lsls	r2, r3
 6cc:	0023      	movs	r3, r4
 6ce:	40f3      	lsrs	r3, r6
 6d0:	4313      	orrs	r3, r2
 6d2:	e7d5      	b.n	680 <__udivmoddi4+0xfc>
 6d4:	4642      	mov	r2, r8
 6d6:	2320      	movs	r3, #32
 6d8:	2100      	movs	r1, #0
 6da:	1a9b      	subs	r3, r3, r2
 6dc:	2200      	movs	r2, #0
 6de:	9100      	str	r1, [sp, #0]
 6e0:	9201      	str	r2, [sp, #4]
 6e2:	2201      	movs	r2, #1
 6e4:	40da      	lsrs	r2, r3
 6e6:	9201      	str	r2, [sp, #4]
 6e8:	e782      	b.n	5f0 <__udivmoddi4+0x6c>
 6ea:	4642      	mov	r2, r8
 6ec:	2320      	movs	r3, #32
 6ee:	0026      	movs	r6, r4
 6f0:	1a9b      	subs	r3, r3, r2
 6f2:	40de      	lsrs	r6, r3
 6f4:	002f      	movs	r7, r5
 6f6:	46b4      	mov	ip, r6
 6f8:	4097      	lsls	r7, r2
 6fa:	4666      	mov	r6, ip
 6fc:	003b      	movs	r3, r7
 6fe:	4333      	orrs	r3, r6
 700:	e7c9      	b.n	696 <__udivmoddi4+0x112>
 702:	46c0      	nop			; (mov r8, r8)

00000704 <__aeabi_idiv0>:
 704:	4770      	bx	lr
 706:	46c0      	nop			; (mov r8, r8)

00000708 <__clzdi2>:
 708:	b510      	push	{r4, lr}
 70a:	2900      	cmp	r1, #0
 70c:	d103      	bne.n	716 <__clzdi2+0xe>
 70e:	f000 f807 	bl	720 <__clzsi2>
 712:	3020      	adds	r0, #32
 714:	e002      	b.n	71c <__clzdi2+0x14>
 716:	1c08      	adds	r0, r1, #0
 718:	f000 f802 	bl	720 <__clzsi2>
 71c:	bd10      	pop	{r4, pc}
 71e:	46c0      	nop			; (mov r8, r8)

00000720 <__clzsi2>:
 720:	211c      	movs	r1, #28
 722:	2301      	movs	r3, #1
 724:	041b      	lsls	r3, r3, #16
 726:	4298      	cmp	r0, r3
 728:	d301      	bcc.n	72e <__clzsi2+0xe>
 72a:	0c00      	lsrs	r0, r0, #16
 72c:	3910      	subs	r1, #16
 72e:	0a1b      	lsrs	r3, r3, #8
 730:	4298      	cmp	r0, r3
 732:	d301      	bcc.n	738 <__clzsi2+0x18>
 734:	0a00      	lsrs	r0, r0, #8
 736:	3908      	subs	r1, #8
 738:	091b      	lsrs	r3, r3, #4
 73a:	4298      	cmp	r0, r3
 73c:	d301      	bcc.n	742 <__clzsi2+0x22>
 73e:	0900      	lsrs	r0, r0, #4
 740:	3904      	subs	r1, #4
 742:	a202      	add	r2, pc, #8	; (adr r2, 74c <__clzsi2+0x2c>)
 744:	5c10      	ldrb	r0, [r2, r0]
 746:	1840      	adds	r0, r0, r1
 748:	4770      	bx	lr
 74a:	46c0      	nop			; (mov r8, r8)
 74c:	02020304 	.word	0x02020304
 750:	01010101 	.word	0x01010101
	...

0000075c <__libc_init_array>:
 75c:	b570      	push	{r4, r5, r6, lr}
 75e:	4e0d      	ldr	r6, [pc, #52]	; (794 <__libc_init_array+0x38>)
 760:	4d0d      	ldr	r5, [pc, #52]	; (798 <__libc_init_array+0x3c>)
 762:	2400      	movs	r4, #0
 764:	1bad      	subs	r5, r5, r6
 766:	10ad      	asrs	r5, r5, #2
 768:	d005      	beq.n	776 <__libc_init_array+0x1a>
 76a:	00a3      	lsls	r3, r4, #2
 76c:	58f3      	ldr	r3, [r6, r3]
 76e:	3401      	adds	r4, #1
 770:	4798      	blx	r3
 772:	42a5      	cmp	r5, r4
 774:	d1f9      	bne.n	76a <__libc_init_array+0xe>
 776:	f000 f8cd 	bl	914 <_init>
 77a:	4e08      	ldr	r6, [pc, #32]	; (79c <__libc_init_array+0x40>)
 77c:	4d08      	ldr	r5, [pc, #32]	; (7a0 <__libc_init_array+0x44>)
 77e:	2400      	movs	r4, #0
 780:	1bad      	subs	r5, r5, r6
 782:	10ad      	asrs	r5, r5, #2
 784:	d005      	beq.n	792 <__libc_init_array+0x36>
 786:	00a3      	lsls	r3, r4, #2
 788:	58f3      	ldr	r3, [r6, r3]
 78a:	3401      	adds	r4, #1
 78c:	4798      	blx	r3
 78e:	42a5      	cmp	r5, r4
 790:	d1f9      	bne.n	786 <__libc_init_array+0x2a>
 792:	bd70      	pop	{r4, r5, r6, pc}
 794:	00000920 	.word	0x00000920
 798:	00000920 	.word	0x00000920
 79c:	00000920 	.word	0x00000920
 7a0:	00000928 	.word	0x00000928

000007a4 <register_fini>:
 7a4:	4b03      	ldr	r3, [pc, #12]	; (7b4 <register_fini+0x10>)
 7a6:	b510      	push	{r4, lr}
 7a8:	2b00      	cmp	r3, #0
 7aa:	d002      	beq.n	7b2 <register_fini+0xe>
 7ac:	4802      	ldr	r0, [pc, #8]	; (7b8 <register_fini+0x14>)
 7ae:	f000 f805 	bl	7bc <atexit>
 7b2:	bd10      	pop	{r4, pc}
 7b4:	00000000 	.word	0x00000000
 7b8:	000007cd 	.word	0x000007cd

000007bc <atexit>:
 7bc:	b510      	push	{r4, lr}
 7be:	0001      	movs	r1, r0
 7c0:	2300      	movs	r3, #0
 7c2:	2200      	movs	r2, #0
 7c4:	2000      	movs	r0, #0
 7c6:	f000 f81f 	bl	808 <__register_exitproc>
 7ca:	bd10      	pop	{r4, pc}

000007cc <__libc_fini_array>:
 7cc:	b570      	push	{r4, r5, r6, lr}
 7ce:	4b09      	ldr	r3, [pc, #36]	; (7f4 <__libc_fini_array+0x28>)
 7d0:	4c09      	ldr	r4, [pc, #36]	; (7f8 <__libc_fini_array+0x2c>)
 7d2:	1ae4      	subs	r4, r4, r3
 7d4:	10a4      	asrs	r4, r4, #2
 7d6:	d009      	beq.n	7ec <__libc_fini_array+0x20>
 7d8:	4a08      	ldr	r2, [pc, #32]	; (7fc <__libc_fini_array+0x30>)
 7da:	18a5      	adds	r5, r4, r2
 7dc:	00ad      	lsls	r5, r5, #2
 7de:	18ed      	adds	r5, r5, r3
 7e0:	682b      	ldr	r3, [r5, #0]
 7e2:	3c01      	subs	r4, #1
 7e4:	4798      	blx	r3
 7e6:	3d04      	subs	r5, #4
 7e8:	2c00      	cmp	r4, #0
 7ea:	d1f9      	bne.n	7e0 <__libc_fini_array+0x14>
 7ec:	f000 f89c 	bl	928 <_fini>
 7f0:	bd70      	pop	{r4, r5, r6, pc}
 7f2:	46c0      	nop			; (mov r8, r8)
 7f4:	00000934 	.word	0x00000934
 7f8:	00000938 	.word	0x00000938
 7fc:	3fffffff 	.word	0x3fffffff

00000800 <__retarget_lock_acquire_recursive>:
 800:	4770      	bx	lr
 802:	46c0      	nop			; (mov r8, r8)

00000804 <__retarget_lock_release_recursive>:
 804:	4770      	bx	lr
 806:	46c0      	nop			; (mov r8, r8)

00000808 <__register_exitproc>:
 808:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a:	464e      	mov	r6, r9
 80c:	4645      	mov	r5, r8
 80e:	46de      	mov	lr, fp
 810:	4657      	mov	r7, sl
 812:	b5e0      	push	{r5, r6, r7, lr}
 814:	4d36      	ldr	r5, [pc, #216]	; (8f0 <__register_exitproc+0xe8>)
 816:	b083      	sub	sp, #12
 818:	0006      	movs	r6, r0
 81a:	6828      	ldr	r0, [r5, #0]
 81c:	4698      	mov	r8, r3
 81e:	000f      	movs	r7, r1
 820:	4691      	mov	r9, r2
 822:	f7ff ffed 	bl	800 <__retarget_lock_acquire_recursive>
 826:	4b33      	ldr	r3, [pc, #204]	; (8f4 <__register_exitproc+0xec>)
 828:	681c      	ldr	r4, [r3, #0]
 82a:	23a4      	movs	r3, #164	; 0xa4
 82c:	005b      	lsls	r3, r3, #1
 82e:	58e0      	ldr	r0, [r4, r3]
 830:	2800      	cmp	r0, #0
 832:	d052      	beq.n	8da <__register_exitproc+0xd2>
 834:	6843      	ldr	r3, [r0, #4]
 836:	2b1f      	cmp	r3, #31
 838:	dc13      	bgt.n	862 <__register_exitproc+0x5a>
 83a:	1c5a      	adds	r2, r3, #1
 83c:	9201      	str	r2, [sp, #4]
 83e:	2e00      	cmp	r6, #0
 840:	d128      	bne.n	894 <__register_exitproc+0x8c>
 842:	9a01      	ldr	r2, [sp, #4]
 844:	3302      	adds	r3, #2
 846:	009b      	lsls	r3, r3, #2
 848:	6042      	str	r2, [r0, #4]
 84a:	501f      	str	r7, [r3, r0]
 84c:	6828      	ldr	r0, [r5, #0]
 84e:	f7ff ffd9 	bl	804 <__retarget_lock_release_recursive>
 852:	2000      	movs	r0, #0
 854:	b003      	add	sp, #12
 856:	bc3c      	pop	{r2, r3, r4, r5}
 858:	4690      	mov	r8, r2
 85a:	4699      	mov	r9, r3
 85c:	46a2      	mov	sl, r4
 85e:	46ab      	mov	fp, r5
 860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 862:	4b25      	ldr	r3, [pc, #148]	; (8f8 <__register_exitproc+0xf0>)
 864:	2b00      	cmp	r3, #0
 866:	d03d      	beq.n	8e4 <__register_exitproc+0xdc>
 868:	20c8      	movs	r0, #200	; 0xc8
 86a:	0040      	lsls	r0, r0, #1
 86c:	e000      	b.n	870 <__register_exitproc+0x68>
 86e:	bf00      	nop
 870:	2800      	cmp	r0, #0
 872:	d037      	beq.n	8e4 <__register_exitproc+0xdc>
 874:	22a4      	movs	r2, #164	; 0xa4
 876:	2300      	movs	r3, #0
 878:	0052      	lsls	r2, r2, #1
 87a:	58a1      	ldr	r1, [r4, r2]
 87c:	6043      	str	r3, [r0, #4]
 87e:	6001      	str	r1, [r0, #0]
 880:	50a0      	str	r0, [r4, r2]
 882:	3240      	adds	r2, #64	; 0x40
 884:	5083      	str	r3, [r0, r2]
 886:	3204      	adds	r2, #4
 888:	5083      	str	r3, [r0, r2]
 88a:	3301      	adds	r3, #1
 88c:	9301      	str	r3, [sp, #4]
 88e:	2300      	movs	r3, #0
 890:	2e00      	cmp	r6, #0
 892:	d0d6      	beq.n	842 <__register_exitproc+0x3a>
 894:	009a      	lsls	r2, r3, #2
 896:	4692      	mov	sl, r2
 898:	4482      	add	sl, r0
 89a:	464a      	mov	r2, r9
 89c:	2188      	movs	r1, #136	; 0x88
 89e:	4654      	mov	r4, sl
 8a0:	5062      	str	r2, [r4, r1]
 8a2:	22c4      	movs	r2, #196	; 0xc4
 8a4:	0052      	lsls	r2, r2, #1
 8a6:	4691      	mov	r9, r2
 8a8:	4481      	add	r9, r0
 8aa:	464a      	mov	r2, r9
 8ac:	3987      	subs	r1, #135	; 0x87
 8ae:	4099      	lsls	r1, r3
 8b0:	6812      	ldr	r2, [r2, #0]
 8b2:	468b      	mov	fp, r1
 8b4:	430a      	orrs	r2, r1
 8b6:	4694      	mov	ip, r2
 8b8:	464a      	mov	r2, r9
 8ba:	4661      	mov	r1, ip
 8bc:	6011      	str	r1, [r2, #0]
 8be:	2284      	movs	r2, #132	; 0x84
 8c0:	4641      	mov	r1, r8
 8c2:	0052      	lsls	r2, r2, #1
 8c4:	50a1      	str	r1, [r4, r2]
 8c6:	2e02      	cmp	r6, #2
 8c8:	d1bb      	bne.n	842 <__register_exitproc+0x3a>
 8ca:	0002      	movs	r2, r0
 8cc:	465c      	mov	r4, fp
 8ce:	328d      	adds	r2, #141	; 0x8d
 8d0:	32ff      	adds	r2, #255	; 0xff
 8d2:	6811      	ldr	r1, [r2, #0]
 8d4:	430c      	orrs	r4, r1
 8d6:	6014      	str	r4, [r2, #0]
 8d8:	e7b3      	b.n	842 <__register_exitproc+0x3a>
 8da:	0020      	movs	r0, r4
 8dc:	304d      	adds	r0, #77	; 0x4d
 8de:	30ff      	adds	r0, #255	; 0xff
 8e0:	50e0      	str	r0, [r4, r3]
 8e2:	e7a7      	b.n	834 <__register_exitproc+0x2c>
 8e4:	6828      	ldr	r0, [r5, #0]
 8e6:	f7ff ff8d 	bl	804 <__retarget_lock_release_recursive>
 8ea:	2001      	movs	r0, #1
 8ec:	4240      	negs	r0, r0
 8ee:	e7b1      	b.n	854 <__register_exitproc+0x4c>
 8f0:	20000428 	.word	0x20000428
 8f4:	00000910 	.word	0x00000910
 8f8:	00000000 	.word	0x00000000
 8fc:	3a6e6553 	.word	0x3a6e6553
 900:	00000020 	.word	0x00000020
 904:	0000000a 	.word	0x0000000a
 908:	3a636552 	.word	0x3a636552
 90c:	00000020 	.word	0x00000020

00000910 <_global_impure_ptr>:
 910:	20000000                                ... 

00000914 <_init>:
 914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 916:	46c0      	nop			; (mov r8, r8)
 918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 91a:	bc08      	pop	{r3}
 91c:	469e      	mov	lr, r3
 91e:	4770      	bx	lr

00000920 <__init_array_start>:
 920:	000007a5 	.word	0x000007a5

00000924 <__frame_dummy_init_array_entry>:
 924:	000000dd                                ....

00000928 <_fini>:
 928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 92a:	46c0      	nop			; (mov r8, r8)
 92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 92e:	bc08      	pop	{r3}
 930:	469e      	mov	lr, r3
 932:	4770      	bx	lr

00000934 <__fini_array_start>:
 934:	000000b5 	.word	0x000000b5
